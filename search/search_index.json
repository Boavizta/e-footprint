{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to the e-footprint documentation !","text":"<p>If you are new to e-footprint, start by checking out the explanation section, then the tutorial.</p> <p>All e-footprint objects, parameters and calculated attributes are listed in the e-footprint object reference.</p> <p>The source code is available in the e-footprint github repository and a graphical interface is under construction to facilitate the use of the model (in beta for now, your feedback is appreciated). </p> <p>This project has been initiated by Vincent Villet for Publicis Sapient and is now part of the green IT association Boavizta\u2019s ecosystem of open source tools. </p>"},{"location":"BoaviztaCloudServer/","title":"BoaviztaCloudServer","text":""},{"location":"BoaviztaCloudServer/#params","title":"Params","text":""},{"location":"BoaviztaCloudServer/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"BoaviztaCloudServer/#provider","title":"provider","text":"<p>description to be done</p>"},{"location":"BoaviztaCloudServer/#instance_type","title":"instance_type","text":"<p>description to be done</p>"},{"location":"BoaviztaCloudServer/#server_type","title":"server_type","text":"<p>description to be done</p>"},{"location":"BoaviztaCloudServer/#lifespan","title":"lifespan","text":"<p>Lifespan of serverless cloud functions from e-footprint hypothesis in year.</p>"},{"location":"BoaviztaCloudServer/#idle_power","title":"idle_power","text":"<p>Idle power of serverless cloud functions from e-footprint hypothesis in watt.</p>"},{"location":"BoaviztaCloudServer/#power_usage_effectiveness","title":"power_usage_effectiveness","text":"<p>Pue of serverless cloud functions in dimensionless.</p>"},{"location":"BoaviztaCloudServer/#average_carbon_intensity","title":"average_carbon_intensity","text":"<p>Average carbon intensity of serverless cloud functions electricity in gram / kilowatt_hour.</p>"},{"location":"BoaviztaCloudServer/#utilization_rate","title":"utilization_rate","text":"<p>Serverless cloud functions utilization rate in dimensionless.</p>"},{"location":"BoaviztaCloudServer/#base_ram_consumption","title":"base_ram_consumption","text":"<p>Base ram consumption of serverless cloud functions from e-footprint hypothesis in gigabyte.</p>"},{"location":"BoaviztaCloudServer/#base_compute_consumption","title":"base_compute_consumption","text":"<p>Base cpu core consumption of serverless cloud functions from e-footprint hypothesis in cpu_core.</p>"},{"location":"BoaviztaCloudServer/#storage","title":"storage","text":"<p>An instance of Storage.</p>"},{"location":"BoaviztaCloudServer/#fixed_nb_of_instances","title":"fixed_nb_of_instances","text":"<p>User defined number of serverless cloud functions instances. Can be an EmptyExplainableObject in which case the optimum number of instances will be computed, or an ExplainableQuantity with a dimensionless value, in which case e-footprint will raise an error if the object needs more instances than available.</p>"},{"location":"BoaviztaCloudServer/#backwards-links","title":"Backwards links","text":"<ul> <li>WebApplication</li> </ul>"},{"location":"BoaviztaCloudServer/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"BoaviztaCloudServer/#api_call_response","title":"api_call_response","text":"<p>Example value: {'impacts': {'gwp': {'unit': 'kgCO2eq', 'description': 'Tota...  </p> <p>Depends directly on:  </p> <ul> <li>serverless cloud functions cloud provider from e-footprint hypothesis</li> <li>serverless cloud functions instance type from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to API call response from Boavizta API cloud instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>ExplainableQuantity in kilogram, representing the Serverless cloud functions fabrication carbon footprint from boavizta api cloud instances.  </p> <p>Example value: 80.0 kilogram  </p> <p>Depends directly on:  </p> <ul> <li>API call response from Boavizta API cloud instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions fabrication carbon footprint from Boavizta API cloud instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#power","title":"power","text":"<p>ExplainableQuantity in watt, representing the Serverless cloud functions power from boavizta api cloud instances.  </p> <p>Example value: 40.07 watt  </p> <p>Depends directly on:  </p> <ul> <li>API call response from Boavizta API cloud instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions power from Boavizta API cloud instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#ram","title":"ram","text":"<p>ExplainableQuantity in gigabyte, representing the Serverless cloud functions ram from boavizta api cloud instances.  </p> <p>Example value: 32.0 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>API call response from Boavizta API cloud instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions ram from Boavizta API cloud instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#compute","title":"compute","text":"<p>ExplainableQuantity in cpu_core, representing the Serverless cloud functions compute from boavizta api cloud instances.  </p> <p>Example value: 8.0 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>API call response from Boavizta API cloud instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions compute from Boavizta API cloud instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#hour_by_hour_ram_need","title":"hour_by_hour_ram_need","text":"<p>Serverless cloud functions hour by hour ram need in gigabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Web application job average occurrences across usage patterns</li> <li> from e-footprint analysis of Boavizta\u2019s Ecobenchmark data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions hour by hour ram need\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#hour_by_hour_compute_need","title":"hour_by_hour_compute_need","text":"<p>Serverless cloud functions hour by hour compute need in cpu_core.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in cpu_core:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Web application job average occurrences across usage patterns</li> <li> from e-footprint analysis of Boavizta\u2019s Ecobenchmark data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to serverless cloud functions hour by hour compute need\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#occupied_ram_per_instance","title":"occupied_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Occupied ram per serverless cloud functions instance including services.  </p> <p>Example value: 0.0 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>Base RAM consumption of serverless cloud functions from e-footprint hypothesis</li> <li>no value </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied RAM per serverless cloud functions instance including services\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#occupied_compute_per_instance","title":"occupied_compute_per_instance","text":"<p>ExplainableQuantity in cpu_core, representing the Occupied cpu per serverless cloud functions instance including services.  </p> <p>Example value: 0.0 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Base cpu core consumption of serverless cloud functions from e-footprint hypothesis</li> <li>no value </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied CPU per serverless cloud functions instance including services\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#available_ram_per_instance","title":"available_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Available ram per serverless cloud functions instance.  </p> <p>Example value: 28.8 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>serverless cloud functions ram from Boavizta API cloud instances</li> <li>serverless cloud functions utilization rate</li> <li>Occupied RAM per serverless cloud functions instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available RAM per serverless cloud functions instance\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#available_compute_per_instance","title":"available_compute_per_instance","text":"<p>ExplainableQuantity in cpu_core, representing the Available cpu per serverless cloud functions instance.  </p> <p>Example value: 7.2 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>serverless cloud functions compute from Boavizta API cloud instances</li> <li>serverless cloud functions utilization rate</li> <li>Occupied CPU per serverless cloud functions instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available CPU per serverless cloud functions instance\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#raw_nb_of_instances","title":"raw_nb_of_instances","text":"<p>Hourly raw number of serverless cloud functions instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>serverless cloud functions hour by hour ram need</li> <li>Available RAM per serverless cloud functions instance</li> <li>serverless cloud functions hour by hour compute need</li> <li>Available CPU per serverless cloud functions instance </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly raw number of serverless cloud functions instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#nb_of_instances","title":"nb_of_instances","text":"<p>Hourly number of serverless cloud functions instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly raw number of serverless cloud functions instances</li> <li>Server type of serverless cloud functions from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly number of serverless cloud functions instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Hourly serverless cloud functions instances fabrication footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of serverless cloud functions instances</li> <li>serverless cloud functions fabrication carbon footprint from Boavizta API cloud instances</li> <li>Lifespan of serverless cloud functions from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly serverless cloud functions instances fabrication footprint\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#instances_energy","title":"instances_energy","text":"<p>Hourly energy consumed by serverless cloud functions instances in kilowatt_hour.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of serverless cloud functions instances</li> <li>Idle power of serverless cloud functions from e-footprint hypothesis</li> <li>PUE of serverless cloud functions</li> <li>Hourly raw number of serverless cloud functions instances</li> <li>serverless cloud functions power from Boavizta API cloud instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly energy consumed by serverless cloud functions instances\u2019s full calculation graph.</p>"},{"location":"BoaviztaCloudServer/#energy_footprint","title":"energy_footprint","text":"<p>Hourly serverless cloud functions energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by serverless cloud functions instances</li> <li>Average carbon intensity of serverless cloud functions electricity </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly serverless cloud functions energy footprint\u2019s full calculation graph.</p>"},{"location":"Changelog/","title":"Change Log","text":"<p>All notable changes to this project will be documented in this file.</p> <p>The format is based on Keep a Changelog and this project adheres to Semantic Versioning.</p>"},{"location":"Changelog/#1110-2025-09-02","title":"[11.1.0] - 2025-09-02","text":""},{"location":"Changelog/#changed","title":"Changed","text":"<ul> <li>Removed single edge usage pattern to edge usage journey constraint. Now several edge usage pattern can have the same edge usage journey as parameter.</li> <li>Removed single edge usage journey to edge process link constraint. Now edge usage journeys can be reused in different edge processes.</li> <li>Renamed SourceRecurringValues and ExplainableRecurringQuantities into SourceRecurrentValues and ExplainableRecurrentQuantities, to keep consistency with RecurrentEdgeProcess.</li> </ul>"},{"location":"Changelog/#1100-2025-08-28","title":"[11.0.0] - 2025-08-28","text":""},{"location":"Changelog/#added","title":"Added","text":"<ul> <li>EdgeStorage, EdgeDevice, RecurrentEdgeProcess, EdgeUsageJourney and EdgeUsagePattern objects, to be able to model a usage that depends on a number of devices sold / produced, in addition to the existing possibility of modeling an absolute usage with a web centralized infrastructure that has to be sized to meet the demand. System object now takes an edge_usage_patterns parameter as input, but older json files remain compatible.</li> </ul>"},{"location":"Changelog/#changed_1","title":"Changed","text":"<ul> <li>Optimized speed of compute_nb_avg_hourly_occurrences function by a order of magnitude of 1000x.</li> </ul>"},{"location":"Changelog/#10115-2025-07-22","title":"[10.1.15] - 2025-07-22","text":""},{"location":"Changelog/#fixed","title":"Fixed","text":"<ul> <li>Remove \"a\" alias for year in Pint units, keep only yr, year and julian_year.</li> <li>Add args and *kwargs to ContextualModelingObjectAttribute\u2019s setattr.</li> </ul>"},{"location":"Changelog/#10114-2025-07-22","title":"[10.1.14] - 2025-07-22","text":""},{"location":"Changelog/#changed_2","title":"Changed","text":"<ul> <li>Simplify compute_hourly_data_exchange_for_usage_pattern logic by using hourly_avg_occurrences_per_usage_pattern. About 30% speed increase.</li> <li>Introduce update_storage_needed, update_storage_freed and update_automatic_storage_dumps_after_storage_duration instead of treating them as properties and recomputing them more than needed. About 10% speed increase.</li> <li>Don\u2019t include CSS escaped name in ModelingObject ids to reduce json size. About 15% json size reduction in big modeling.</li> <li>Custom unit registry to optimize Pint\u2019s unit conversions. About 5% speed increase.</li> <li>Improved performance analysis tooling.</li> </ul>"},{"location":"Changelog/#10113-2025-07-11","title":"[10.1.13] - 2025-07-11","text":""},{"location":"Changelog/#added_1","title":"Added","text":"<ul> <li>Custom InsufficientCapacityError and NegativeCumulativeStorageNeedError for servers and storage so that insufficient capacity values can be captured for subsequent error handling.</li> </ul>"},{"location":"Changelog/#changed_3","title":"Changed","text":"<ul> <li>Removed unnecessary hourly_occurrences_across_usage_patterns calculated attribute in Job class.</li> </ul>"},{"location":"Changelog/#10112-2025-07-03","title":"[10.1.12] - 2025-07-03","text":""},{"location":"Changelog/#fixed_1","title":"Fixed","text":"<ul> <li>Make sure copy doesn\u2019t create links to copied objects, to allow for the automatic garbage collection of copied objects.</li> </ul>"},{"location":"Changelog/#changed_4","title":"Changed","text":"<ul> <li>Introduce computation of ExplainableObject flat tuple formulas as intermediary step before printing explanation, to allow for different formattings in different contexts (notably web application).</li> <li>Count number of live objects in performance tests to make sure that there are no memory leaks.</li> </ul>"},{"location":"Changelog/#10111-2025-06-23","title":"[10.1.11] - 2025-06-23","text":""},{"location":"Changelog/#changed_5","title":"Changed","text":"<ul> <li>Various optimizations that slightly increase speed and divide memory footprint by 2.</li> <li>Boavizta API is now always call via web by default and only fallbacks to package call if web call fails.</li> </ul>"},{"location":"Changelog/#10110-2025-06-18","title":"[10.1.10] - 2025-06-18","text":""},{"location":"Changelog/#changed_6","title":"Changed","text":"<ul> <li>Use float instead of np.float32 for ExplainableQuantity values to avoid decimal issues (like 1.2 turning into 1.1999999999999997).</li> </ul>"},{"location":"Changelog/#1019-2025-06-18","title":"[10.1.9] - 2025-06-18","text":""},{"location":"Changelog/#fixed_2","title":"Fixed","text":"<ul> <li>Include start_date and timezone to ExplainableHourlyQuantity json dump even when object hasn\u2019t been rehydrated.</li> </ul>"},{"location":"Changelog/#1018-2025-06-18","title":"[10.1.8] - 2025-06-18","text":""},{"location":"Changelog/#changed_7","title":"Changed","text":"<ul> <li>Use numpy instead of pandas for time series calculations to improve performance and reduce memory usage. About 20x performance gains \ud83d\ude4c!!</li> <li>Cache ObjectLinkedToModelingObj attributes like id or dict_container to avoid recomputing them each time they are accessed and speed up calculus graph parsing. 2x performance gain on complex edits.</li> <li>Use float32 instead of float64 for time series values to reduce memory usage and improve performance.</li> <li>Various other performance improvements in e-footprint logic. Now about 95% of compute time is spent computing the calculations and not in the e-footprint logic itself.</li> </ul>"},{"location":"Changelog/#1017-2025-06-11","title":"[10.1.7] - 2025-06-11","text":""},{"location":"Changelog/#fixed_3","title":"Fixed","text":"<ul> <li>When deleting an object, set modeling object container of its attributes to None to break all links they have with other object attributes in the calculation graph.</li> </ul>"},{"location":"Changelog/#1016-2025-06-06","title":"[10.1.6] - 2025-06-06","text":""},{"location":"Changelog/#fixed_4","title":"Fixed","text":"<ul> <li>Launch modeling object computation chain after Service init to make sure servers raise errors if not enough resources + recompute systems because they depend on the server.</li> <li>Test that system is loaded from json with calculated attribute by checking that calculated attribute name is in json dict and not that calculated attribute value is not EmptyExplainableObject, because in rare case (now tested) the only calculated value could be EmptyExplainableObject and then lead to incorrectly triggering the after_init method of the object</li> </ul>"},{"location":"Changelog/#changed_8","title":"Changed","text":"<ul> <li>Improve quality of errors raised in the process of calculation graph parsing to facilitate debugging.</li> </ul>"},{"location":"Changelog/#1015-2025-06-04","title":"[10.1.5] - 2025-06-04","text":""},{"location":"Changelog/#fixed_5","title":"Fixed","text":"<ul> <li>Compute server attributes after installing service on it to raise error if server doesn\u2019t have enough resources to run the service.</li> </ul>"},{"location":"Changelog/#1014-2025-06-03","title":"[10.1.4] - 2025-06-03","text":""},{"location":"Changelog/#fixed_6","title":"Fixed","text":"<ul> <li>Rehydrate children calculus graph relationships from json when setting ExplainableObject modeling obj container. In cases when an object is deleted after having been loaded from json it allows to make sure that children get to track their ancestors before the ancestors are updated.</li> </ul>"},{"location":"Changelog/#1013-2025-06-02","title":"[10.1.3] - 2025-06-02","text":""},{"location":"Changelog/#fixed_7","title":"Fixed","text":"<ul> <li>Stop including dict containers in ExplainableObject attr_updates_chains. Instead include directly ExplainableObjectDict elements to clarify calculus graph logic.</li> <li>In ExplainableObject only run compute_explain_tuples only if new_modeling_obj_container is not None.</li> </ul>"},{"location":"Changelog/#1012-2025-06-02","title":"[10.1.2] - 2025-06-02","text":""},{"location":"Changelog/#fixed_8","title":"Fixed","text":"<ul> <li>In ModelingObject\u2019s from_json_dict, only set trigger_modeling_updates to True at the end of object creation if parameter set_trigger_modeling_updates_to_true is True</li> <li>ModelingUpdate recomputation order to handle rare case where an attribute must be recomputed both because object relationships changed and an object input changed.</li> <li>ObjectLinkedToModelingObj id property to incorporate dict key when object is a value within an ExplainableObjectDict. Needed to fix compute_ancestors_not_in_computation_chain and set_modeling_obj_container logic in replace_in_mod_obj_container_without_recomputation.</li> </ul>"},{"location":"Changelog/#1011-2025-05-28","title":"[10.1.1] - 2025-05-28","text":""},{"location":"Changelog/#changed_9","title":"Changed","text":"<ul> <li>Handle explainable objects deserialization through ExplainableObject.from_json_dict and allow for extensibility with the register_subclass classmethod of ExplainableObject. In this way, new ExplainableObject subclasses can be created in another project (the interface project for example), registered and deserialized, without having to modify the e-footprint codebase.</li> <li>In the same vein, a from_json_dict method has been added to the ModelingObject class.</li> </ul>"},{"location":"Changelog/#1010-2025-05-25","title":"[10.1.0] 2025-05-25","text":""},{"location":"Changelog/#added_2","title":"Added","text":"<ul> <li>Possibility to save calculated attributes when serializing system to json.</li> <li>Performance tests that make sure that big system (135 objects) serialization and deserialization take less than 50 ms.</li> </ul>"},{"location":"Changelog/#changed_10","title":"Changed","text":"<ul> <li>Simplify calculation graphs by making only appear calculations that are attributes of a modeling object and not calculations that have labels (because all calculatinos that are attributes of a modeling object have labels but some calculations that have a label don\u2019t belong to a modeling object).</li> <li>Order of Storage parameters.</li> </ul>"},{"location":"Changelog/#10011-2025-05-04","title":"[10.0.11] 2025-05-04","text":""},{"location":"Changelog/#fixed_9","title":"Fixed","text":"<ul> <li>Create GPUJob object to be able to create a custom call to a GPU server with no service installed. Using Job with compute_needed in gpu unit resulted in a unit check error.</li> </ul>"},{"location":"Changelog/#10010-2025-04-30","title":"[10.0.10] 2025-04-30","text":""},{"location":"Changelog/#fixed_10","title":"Fixed","text":"<ul> <li>Fix ecologits version to 0.6 in pyproject.toml to avoid breaking changes in the ecologits package.</li> <li>Fix ContextualModelingObjectAttribute type checking so that passing a wrong modeling object input to another modeling object raises a helpful error</li> </ul>"},{"location":"Changelog/#changed_11","title":"Changed","text":"<ul> <li>efootprint hypothesis label and better units for default values like average carbon intensity (g/kWh instead of kg/kWh).</li> </ul>"},{"location":"Changelog/#1009-2025-04-10","title":"[10.0.9] 2025-04-10","text":""},{"location":"Changelog/#fixed_11","title":"Fixed","text":"<ul> <li>Make sure simulated and reference timeseries have same unit when plotting.</li> <li>Remove duplicate datetime indexes arising from DST changes by summing values with same datetime index.</li> </ul>"},{"location":"Changelog/#1008-2025-04-08","title":"[10.0.8] 2025-04-08","text":""},{"location":"Changelog/#fixed_12","title":"Fixed","text":"<ul> <li>Use date_range instead of period_range in pandas dataframes to facilitate timezone and DST management.</li> </ul>"},{"location":"Changelog/#1007-2025-04-08","title":"[10.0.7] 2025-04-08","text":""},{"location":"Changelog/#fixed_13","title":"Fixed","text":"<ul> <li>Use ids instead of names in system fabrication and energy footprints propertys to avoid overwrites in cases where several objects have the same name.</li> </ul>"},{"location":"Changelog/#1006-2025-04-01","title":"[10.0.6] 2025-04-01","text":""},{"location":"Changelog/#changed_12","title":"Changed","text":"<ul> <li>Attributes positivity is now checked when attributes are set. For now only the data_stored attribute of the Job class is allowed to be negative.</li> <li>The Boaviztapi is now a dependency of e-footprint so there is no need no do a network call to query its data. Setting the environment variable CALL_BOAVIZTAPI_VIA_WEB to any value will fallback to the web call. This might be useful for launching e-footprint python scripts repeatidly as the boavizta package may take several seconds to load.</li> </ul>"},{"location":"Changelog/#fixed_14","title":"Fixed","text":"<ul> <li>Boaviztapi data parsing logic in BoaviztaCloudServer class. The CPU and RAM values used were the ones of the platform and not the virtual machine, which resulted very wrong values.</li> </ul>"},{"location":"Changelog/#1005-2025-03-27","title":"[10.0.5] 2025-03-27","text":""},{"location":"Changelog/#fixed_15","title":"Fixed","text":"<ul> <li>Computation update logic when system usage patterns are updated.</li> </ul>"},{"location":"Changelog/#1004-2025-03-25","title":"[10.0.4] 2025-03-25","text":""},{"location":"Changelog/#fixed_16","title":"Fixed","text":"<ul> <li>Make calculations possible even if usage journey duration is 0.</li> <li>Cast default null values to float in create_hourly_usage_from_frequency to prevent subsequent automatic casting to int.</li> <li>Create round method for EmptyExplainableObjects so that an empty System can be created.</li> </ul>"},{"location":"Changelog/#1003-2025-03-20","title":"[10.0.3] 2025-03-20","text":""},{"location":"Changelog/#fixed_17","title":"Fixed","text":"<ul> <li>Stop automatic rounding of ExplainableHourlyQuantities when converting their unit.</li> <li>Round total system footprint to the tenth of gram.</li> </ul>"},{"location":"Changelog/#1002-2025-03-04","title":"[10.0.2] 2025-03-04","text":""},{"location":"Changelog/#fixed_18","title":"Fixed","text":"<ul> <li>Don\u2019t exclude all attributes starting with \"previous\" or \"initial\" from ModelingObject json representation.</li> <li>log warning only if json efootprint version is different from the current efootprint version.</li> </ul>"},{"location":"Changelog/#changed_13","title":"Changed","text":"<ul> <li>Upgrade ecologits to 0.6 version.</li> <li>Small logging improvements.</li> </ul>"},{"location":"Changelog/#1001-2025-02-27","title":"[10.0.1] 2025-02-27","text":""},{"location":"Changelog/#fixed_19","title":"Fixed","text":"<ul> <li>Make sure version 9 to 10 json upgrade doesn\u2019t break when the json doesn\u2019t have \"Hardware\" in its keys.</li> </ul>"},{"location":"Changelog/#changed_14","title":"Changed","text":"<ul> <li>round time series in json by default at 3 decimals and remove rounding of devices fabrication footprint in computation.</li> </ul>"},{"location":"Changelog/#1000-2025-02-20","title":"[10.0.0] 2025-02-20","text":""},{"location":"Changelog/#changed_15","title":"Changed","text":"<ul> <li>Make canonical computation order depend on class inheritance of base efootprint classes instead of a full explicit list of all e-footprint classes.</li> <li>json_to_system function now takes a dict of all e-footprint classes as input.</li> <li>These changes will allow for extendability of e-footprint classes in projects that use e-footprint as a dependency. As long a the new classes are subclasses of the base e-footprint classes defined in the CANONICAL_COMPUTATION_ORDER variable in efootprint.core.all_classes_in_order, they will be taken into account in the canonical computation order. The extended classes will have to be added to the dict of all e-footprint classes passed to the json_to_system function.</li> </ul>"},{"location":"Changelog/#added_3","title":"Added","text":"<ul> <li>retrocompatibility with version 9 json files.</li> </ul>"},{"location":"Changelog/#915-2025-02-17","title":"[9.1.5] 2025-02-17","text":""},{"location":"Changelog/#fixed_20","title":"Fixed","text":"<ul> <li>Pass check_input_validity parameter from GenAIModel\u2019s setattr to its super()\u2019s setattr method to avoid unnecessary input validity checks.</li> <li>Set output token count label in GenAIJob.</li> </ul>"},{"location":"Changelog/#changed_16","title":"Changed","text":"<ul> <li>Only log attribute updates in ModelingObject to reduce the number of debug logs.</li> </ul>"},{"location":"Changelog/#914-2025-02-04","title":"[9.1.4] 2025-02-04","text":""},{"location":"Changelog/#fixed_21","title":"Fixed","text":"<ul> <li>Installable services logic.</li> </ul>"},{"location":"Changelog/#913-2025-02-03","title":"[9.1.3] 2025-02-03","text":""},{"location":"Changelog/#fixed_22","title":"Fixed","text":"<ul> <li>When deleting an object only launch recomputations if trigger_modeling_updates is True.</li> </ul>"},{"location":"Changelog/#912-2025-02-03","title":"[9.1.2] 2025-02-03","text":""},{"location":"Changelog/#fixed_23","title":"Fixed","text":"<ul> <li>Fix order of providers in GenAIModel provider list values.</li> </ul>"},{"location":"Changelog/#911-2025-02-01","title":"[9.1.1] 2025-02-01","text":""},{"location":"Changelog/#changed_17","title":"Changed","text":"<ul> <li>Don\u2019t check inputs validity in json_to_system for performance optimisation.</li> </ul>"},{"location":"Changelog/#fixed_24","title":"Fixed","text":"<ul> <li>Remove storage from servers default values both for performance and consistency reasons (an object attribute should not be treated as a value).</li> </ul>"},{"location":"Changelog/#910-2025-02-01","title":"[9.1.0] 2025-02-01","text":""},{"location":"Changelog/#added_4","title":"Added","text":"<ul> <li>Boolean launch_system_computations in json_to_system function to allow for not launching system computations after loading it from a json file. Will be useful for avoiding unnecessary computations in the interface.</li> </ul>"},{"location":"Changelog/#fixed_25","title":"Fixed","text":"<ul> <li>Include ecobenchmark csv file in package so that it doesn\u2019t ever has to be downloaded from the internet.</li> </ul>"},{"location":"Changelog/#changed_18","title":"Changed","text":"<ul> <li>Optimized usage journey step dependencies to reduce required computations when jobs are updated.</li> </ul>"},{"location":"Changelog/#903-2025-01-31","title":"[9.0.3] 2025-01-31","text":""},{"location":"Changelog/#fixed_26","title":"Fixed","text":"<ul> <li>Use modeling object\u2019s setattr method in json_to_system to ensure that modeling object containers are always correctly set (the logic had been forgotten for EmptyExplainableObjects).</li> <li>Set JobBase as required class for UsageJourneyStep jobs attribute, to keep it generic.</li> </ul>"},{"location":"Changelog/#902-2025-01-30","title":"[9.0.2] 2025-01-30","text":""},{"location":"Changelog/#fixed_27","title":"Fixed","text":"<ul> <li>Define list_values and conditional_list_values in ServerBaseClass instead of Server and GPUServer to ensure consistency.</li> </ul>"},{"location":"Changelog/#901-2025-01-29","title":"[9.0.1] 2025-01-29","text":""},{"location":"Changelog/#fixed_28","title":"Fixed","text":"<ul> <li>In json_to_system calculated attributes are initialized to EmptyExplainableObjects to avoid errors in corner cases like a Network with no associated jobs.</li> </ul>"},{"location":"Changelog/#changed_19","title":"Changed","text":"<ul> <li>Only supported Python version is now 3.12.</li> </ul>"},{"location":"Changelog/#900-2025-01-29","title":"[9.0.0] 2025-01-29","text":""},{"location":"Changelog/#added_5","title":"Added","text":"<ul> <li>Introduction of the concept of Services with VideoStreaming, WebApplication and GenAIModel classes, and their associated jobs VideoStreamingJob, WebApplicatioJob and GenAIJob.</li> <li>BoaviztaCloudServer class to replace the Boavizta builder functions. This change allows for better calculation graph tracking and to be able to update BoaviztaCloudServer instances attributes and benefit from the recomputation logic.</li> <li>GPUServer class with its compute attribute in new unit gpu.</li> <li>All e-footprint objects now have default values and a from_defaults method.</li> </ul>"},{"location":"Changelog/#changed_20","title":"Changed","text":"<ul> <li>Data upload and data download have been suppressed in the Job class and replaced by a single data_transferred attribute. This removes the ambiguity around the notion of data upload and download (is it in reference to the device ? to the server ?) and simplifies the model.</li> <li>UserJourney and UserJourneyStep classes have been renamed UsageJourney and UsageJourneyStep to better reflect their generic purpose.</li> <li>The notion of cpu needed in jobs and servers has been abstracted to compute to better handle different compute types like cpu and gpu.</li> </ul>"},{"location":"Changelog/#821-2025-01-07","title":"[8.2.1] 2025-01-07","text":""},{"location":"Changelog/#fixed_29","title":"Fixed","text":"<ul> <li>Wrap ModelingObjects into ContextualModelingObjectAttribute and lists into ListLinkedToModelingObj in json_to_system function so that all ModelingObject attributes inherit from ObjectLinkedToModelingObj class. This change fixes recomputation of ModelingObject or list attributes when the system is loaded from a json file.</li> </ul>"},{"location":"Changelog/#820-2025-01-06","title":"[8.2.0] 2025-01-06","text":""},{"location":"Changelog/#changed_21","title":"Changed","text":"<ul> <li>Simulation object changed into ModelingUpdate. This change allows the use of the ModelingUpdate object anywhere the optimized recomputation logic needs to be called + it allows for the possibility to make optimized batch changes on the baseline model. This change will allow greater flexibility in the evolution of e-footprint\u2019s input data structure by removing the need to duplicate the recomputation logic for each input data structure.</li> </ul>"},{"location":"Changelog/#810-2024-12-20","title":"[8.1.0] 2024-12-20","text":""},{"location":"Changelog/#added_6","title":"Added","text":"<ul> <li>Possibility to make simulations of changes in the future. A simulation is a date in the future and the list of changes that will happen at this date. The changes can be the addition of a new object, the deletion of an object, the modification of an object attribute, the addition of a new link between objects, the deletion of a link between objects, the modification of a link between objects. The simulation can be run on a system to see the impact of the changes on the system's carbon footprint.</li> </ul>"},{"location":"Changelog/#801-2024-11-12","title":"[8.0.1] 2024-11-12","text":""},{"location":"Changelog/#fixed_30","title":"Fixed","text":"<ul> <li>When the fixed_nb_of_instances attribute of an OnPremise server or a Storage object was set to None, the calculation graph wouldn\u2019t be tracked and so no uptstream recomputation was triggered if the fixed_nb_of_instances attribute was updated. Now, the fixed_nb_of_instances attribute is set to EmptyExplainableObject by default, which allows to build the calculation graph and recompute attributes that depend of the fixed_nb_of_instances logic, when the fixed_nb_of_instances attribute is updated.</li> <li>OnPremise and Storage\u2019s update_nb_of_instances used to break when raw_nb_of_instances was EmptyExplainableObject. Now fixed.</li> </ul>"},{"location":"Changelog/#800-2024-11-04","title":"[8.0.0] 2024-11-04","text":""},{"location":"Changelog/#changed_22","title":"Changed","text":"<ul> <li>A Storage object can now be linked to only one Server object and gets its average_carbon_intensity and power_usage_effectiveness attributes from its server. This change simplifies the hardware part of the model and makes it more realistic.</li> </ul>"},{"location":"Changelog/#added_7","title":"Added","text":"<ul> <li>Storage has now an attribute \"fixed_nb_of_instances\" to specify the number of instances of a storage object like it's already implemented for servers.</li> <li>New time builders have been added</li> <li>Boavizta builders have been enriched (mainly the Storage part).</li> </ul>"},{"location":"Changelog/#701-2024-10-28","title":"[7.0.1] 2024-10-28","text":""},{"location":"Changelog/#fixed_31","title":"Fixed","text":"<ul> <li>Object relationship graph. Now links are shown between objects even if there is an ignored object in the chain of links.</li> <li>Network energy footprint calculation logic. If a job was linked to a usage pattern not linked to the Network, the calculation would raise a KeyError. Now, the Network energy footprint calculation logic only loops on usage patterns common to jobs and Network and can handle such cases.</li> </ul>"},{"location":"Changelog/#changed_23","title":"Changed","text":"<ul> <li>Simplify repr method of ModelingObject class to make it return less characters.</li> </ul>"},{"location":"Changelog/#700-2024-10-7","title":"[7.0.0] 2024-10-7","text":"<ul> <li>Storage is now an attribute of server objects. This change simplifies the hardware part of the model and makes it more realistic.</li> </ul>"},{"location":"Changelog/#602-2024-10-02","title":"[6.0.2] 2024-10-02","text":""},{"location":"Changelog/#fixed_32","title":"Fixed","text":"<ul> <li>Make copies of event duration values before converting them to hour to use them in calculations, not to convert the original value in place.</li> </ul>"},{"location":"Changelog/#601-2024-09-27","title":"[6.0.1] 2024-09-27","text":""},{"location":"Changelog/#fixed_33","title":"Fixed","text":"<ul> <li>Label has been added in System class to display its calculations in the graph.</li> </ul>"},{"location":"Changelog/#600-2024-09-27","title":"[6.0.0] 2024-09-27","text":""},{"location":"Changelog/#added_8","title":"Added","text":"<ul> <li>Introduce in job Object the attribute \"data_stored\". This attribute is the amount of data stored by the job in the storage. It can be negative if the job deletes data from the storage.</li> </ul>"},{"location":"Changelog/#500-2024-09-20","title":"[5.0.0] 2024-09-20","text":""},{"location":"Changelog/#changed_24","title":"Changed","text":"<ul> <li>Supress Service object and transfer its functions to Server and Storage. Now jobs directly link to servers and storage. This change simplifies e-footprint\u2019s object structure and removes the ambiguity surrounding the term Service.</li> </ul>"},{"location":"Changelog/#400-2024-09-11","title":"[4.0.0] 2024-09-11","text":""},{"location":"Changelog/#changed_25","title":"Changed","text":"<ul> <li>Major update: usage is now described as hourly number of user journey starts. This allows for a chronological modeling and later will allow simulation of changes in the future.</li> <li>Server electricity consumption now depends on server load.</li> </ul>"},{"location":"Changelog/#300-2024-07-29","title":"[3.0.0] 2024-07-29","text":""},{"location":"Changelog/#changed_26","title":"Changed","text":"<ul> <li>Suppress DevicePopulation object and transfer its functions to UsagePattern for simplification of object structure. This change removes an ambiguity around the notion of visits and number of devices: by removing the notion of devices and users from the model, only user journey frequency is kept and there remains no confusion possible between user journey frequency and user journey frequency per user (which has disappeared).</li> <li>Minor import order refactoring to comply better with PEP8 guidelines.</li> </ul>"},{"location":"Changelog/#added_9","title":"Added","text":"<ul> <li>Content in the documentation.</li> </ul>"},{"location":"Changelog/#216-2024-06-13","title":"[2.1.6] 2024-06-13","text":""},{"location":"Changelog/#fixed_34","title":"Fixed","text":"<ul> <li>Force ModelingObject and ExplainableObject ids to start with a letter and not contain backslashes.</li> </ul>"},{"location":"Changelog/#215-2024-06-06","title":"[2.1.5] 2024-06-06","text":""},{"location":"Changelog/#fixed_35","title":"Fixed","text":"<ul> <li>Make ModelingObject and ExplainableObject ids css escaped.</li> </ul>"},{"location":"Changelog/#214-2024-05-17","title":"[2.1.4] 2024-05-17","text":""},{"location":"Changelog/#fixed_36","title":"Fixed","text":"<ul> <li>System footprints by category and object graph legend aligns to the right if server impact is bigger than devices impact</li> </ul>"},{"location":"Changelog/#213-2024-05-16","title":"[2.1.3] 2024-05-16","text":""},{"location":"Changelog/#changed_27","title":"Changed","text":"<ul> <li>Don\u2019t round up the number of users in parallel as it creates very wrong results when there are few users in parallel.</li> </ul>"},{"location":"Changelog/#212-2024-05-16","title":"[2.1.2] 2024-05-16","text":""},{"location":"Changelog/#fixed_37","title":"Fixed","text":"<ul> <li>\"ton\" unit to \"tonne\" because in Pint a ton is equal to 2000 pounds and not 1000 kg.</li> </ul>"},{"location":"Changelog/#211-2024-05-16","title":"[2.1.1] 2024-05-16","text":""},{"location":"Changelog/#fixed_38","title":"Fixed","text":"<ul> <li>Remove useless title parameter from EmissionPlotter class.</li> </ul>"},{"location":"Changelog/#210-2024-05-15","title":"[2.1.0] - 2024-05-15","text":""},{"location":"Changelog/#added_10","title":"Added","text":"<ul> <li>Possibility to export raw html in plot_footprints_by_category_and_object System method.</li> <li>Possibility to resize plot_footprints_by_category_and_object output\u2019s graph.</li> </ul>"},{"location":"Changelog/#changed_28","title":"Changed","text":"<ul> <li>Improve emission diffs graph and harmonize its colors and legend with the plot_footprints_by_category_and_object graph.</li> </ul>"},{"location":"Changelog/#205-2024-04-16","title":"[2.0.5] - 2024-04-16","text":""},{"location":"Changelog/#fixed_39","title":"Fixed","text":"<ul> <li>In function json_to_system make sure that System ids don\u2019t change at system loading time.</li> </ul>"},{"location":"Changelog/#204-2024-04-16","title":"[2.0.4] - 2024-04-16","text":""},{"location":"Changelog/#fixed_40","title":"Fixed","text":"<ul> <li>In function json_to_system make recompute Systems by using their init and after_init methods to make sure that all their internal variables are initialized.</li> </ul>"},{"location":"Changelog/#203-2024-04-15","title":"[2.0.3] - 2024-04-15","text":""},{"location":"Changelog/#fixed_41","title":"Fixed","text":"<ul> <li>In function json_to_system make sure that all objects unlinked to a system compute their calculated attributes, and not only Services.</li> </ul>"},{"location":"Changelog/#202-2024-04-15","title":"[2.0.2] - 2024-04-15","text":""},{"location":"Changelog/#fixed_42","title":"Fixed","text":"<ul> <li>Loading of system from json when there is a service that is not linked to a usage pattern (case when a service is installed on a server but doesn\u2019t receive requests).</li> </ul>"},{"location":"Changelog/#201-2024-04-12","title":"[2.0.1] - 2024-04-12","text":""},{"location":"Changelog/#fixed_43","title":"Fixed","text":"<ul> <li>Setup of previous attribute value for lists at e-footprint object initiation when using the json_to_system function, so that recomputation works fine when list attributes are updated.</li> </ul>"},{"location":"Changelog/#200-2024-04-06","title":"[2.0.0] - 2024-04-06","text":""},{"location":"Changelog/#added_11","title":"Added","text":"<ul> <li>Job object for the encapsulation of request information, to introduce the possibility to have multiple request to services for a single user journey step.</li> <li>Job builders from Boavizta\u2019s ecobenchmark data</li> </ul>"},{"location":"Changelog/#132-2024-03-20","title":"[1.3.2] - 2024-03-20","text":""},{"location":"Changelog/#added_12","title":"Added","text":"<ul> <li>Characterics of objects are now displayed when hovering over a node in an object relationship graph (to create such a graph use the object_relationship_graph_to_file method of the ModelingObject class).</li> </ul>"},{"location":"Changelog/#131-2024-03-16","title":"[1.3.1] - 2024-03-16","text":""},{"location":"Changelog/#fixed_44","title":"Fixed","text":"<ul> <li>set modeling obj container of ExplainableObjects created through json_to_system function so that accessing their id property doesn\u2019t trigger a ValueError because of a null modeling_obj_container.</li> <li>Fixed ExplainableObject\u2019s set_label method so that it doesn\u2019t duplicate \"from source.name\" when reconstructing the object with the json_to_system function.</li> </ul>"},{"location":"Changelog/#130-2024-03-15","title":"[1.3.0] - 2024-03-15","text":""},{"location":"Changelog/#added_13","title":"Added","text":"<ul> <li>plot_emission_diffs method to System for easy analysis of System changes.</li> <li>Tutorial to documentation.</li> <li>System changes analysis in tutorial.</li> </ul>"},{"location":"Changelog/#122-2024-03-08","title":"[1.2.2] - 2024-03-08","text":""},{"location":"Changelog/#added_14","title":"Added","text":"<ul> <li>notebook parameter in object and calculus graph generation functions + set cdn_resources=in_line in pyvis Network objects to silence jupyter warning</li> <li>to_json, repr and str methods in ExplainableObject subclasses and ModelingObject.</li> </ul>"},{"location":"Changelog/#changed_29","title":"Changed","text":"<ul> <li>quickstart as jupyter notebook</li> </ul>"},{"location":"Changelog/#121-2024-02-29","title":"[1.2.1] - 2024-02-29","text":""},{"location":"Changelog/#added_15","title":"Added","text":""},{"location":"Changelog/#changed_30","title":"Changed","text":""},{"location":"Changelog/#fixed_45","title":"Fixed","text":"<ul> <li>Possibility to use fixed_nb_of_instances with the on_premise_server_from_config builder.</li> </ul>"},{"location":"Changelog/#120-2024-02-29","title":"[1.2.0] - 2024-02-29","text":""},{"location":"Changelog/#added_16","title":"Added","text":"<ul> <li>Possibility to specify the fixed number of on premise instances through the fixed_nb_of_instances attribute</li> <li>Doc generation logic with mkdocs. Here is the link to the e-footprint documentation.</li> </ul>"},{"location":"Changelog/#changed_31","title":"Changed","text":""},{"location":"Changelog/#fixed_46","title":"Fixed","text":"<ul> <li>File paths in graphs generating functions</li> </ul>"},{"location":"Changelog/#119-2024-02-12","title":"[1.1.9] - 2024-02-12","text":""},{"location":"Changelog/#added_17","title":"Added","text":"<ul> <li>system_to_json and json_to_system functions in api_utils package in order to be able to save a system as json file and then load it and run computations. Saving of intermediate calculations will be implemented in another release.</li> </ul>"},{"location":"Changelog/#changed_32","title":"Changed","text":"<ul> <li>calculated_attributes are now a property method instead of an attribute, to facilitate system to json and json to system flow.</li> <li>calculated attributes of System class are now properties for a more coherent syntax.</li> <li>Countries class is now made of country generator objects to avoid unwanted link between systems that would share a common country.</li> <li>System now inherits from ModelingObject</li> </ul>"},{"location":"Changelog/#118-2024-02-02","title":"[1.1.8] - 2024-02-02","text":""},{"location":"Changelog/#added_18","title":"Added","text":"<ul> <li>calculus_graph_to_file function in ExplainableObject to more easily create calculus graphs</li> <li>object_relationship_graph_to_file function in ModelingObject to more easily create object relationship graphs</li> <li>Generic self_delete method for ModelingObjects</li> </ul>"},{"location":"Changelog/#changed_33","title":"Changed","text":"<ul> <li>System now inherits from ModelingObject</li> </ul>"},{"location":"Changelog/#117-2024-01-29","title":"[1.1.7] - 2024-01-29","text":""},{"location":"Changelog/#added_19","title":"Added","text":""},{"location":"Changelog/#changed_34","title":"Changed","text":"<ul> <li>Put ModelingObject list update logic in ModelingObject setattr method</li> <li>Name server CPU capacity cpu_cores instead of nb_of_cpus to make it clearer</li> </ul>"},{"location":"Changelog/#fixed_47","title":"Fixed","text":"<ul> <li>Set input attribute label at attribute setting time and not after. Avoids a bug when the input attribute of a ModelingObject is the result of a calculation and hence has no label.</li> </ul>"},{"location":"Changelog/#116-2024-01-29","title":"[1.1.6] - 2024-01-29","text":""},{"location":"Changelog/#added_20","title":"Added","text":""},{"location":"Changelog/#changed_35","title":"Changed","text":"<ul> <li>Put all the naming logic that was in SourceValue and SourceObject classes into ExplainableObject</li> </ul>"},{"location":"Changelog/#fixed_48","title":"Fixed","text":"<ul> <li>Boaviztapi server builders to accommodate for Boaviztapi update. </li> </ul>"},{"location":"Changelog/#115-2024-01-18","title":"[1.1.5] - 2024-01-18","text":""},{"location":"Changelog/#added_21","title":"Added","text":"<ul> <li>plot_footprints_by_category_and_object method to the System object, to display the CO2 emission breakdown by object type (server, storage, network, end user devices), emission types (from electricity and from fabrication), and by objects within object types (for example, the share of each server within the servers).</li> <li>Default object builders that return a new object each time.</li> <li>Server builders based on the Boavizta API.</li> </ul>"},{"location":"Changelog/#changed_36","title":"Changed","text":"<ul> <li>Suppress the notion of server_ram_per_data_transferred to simply directly specify the ram_needed for UserJourneyStep objects.</li> <li>More explicity quickstart with all attributes explicitely named and set.</li> </ul>"},{"location":"Changelog/#fixed_49","title":"Fixed","text":""},{"location":"Changelog/#114-2023-11-13","title":"[1.1.4] - 2023-11-13","text":""},{"location":"Changelog/#added_22","title":"Added","text":""},{"location":"Changelog/#changed_37","title":"Changed","text":""},{"location":"Changelog/#fixed_50","title":"Fixed","text":"<ul> <li>Don\u2019t write logs to file by default to avoid unnecessary storage usage + be compliant with Streamlit Cloud security.</li> </ul>"},{"location":"Changelog/#113-2023-11-13","title":"[1.1.3] - 2023-11-13","text":""},{"location":"Changelog/#added_23","title":"Added","text":""},{"location":"Changelog/#changed_38","title":"Changed","text":""},{"location":"Changelog/#fixed_51","title":"Fixed","text":"<ul> <li>Put data folder (for logs) inside module and set default log level to INFO.</li> </ul>"},{"location":"Changelog/#112-2023-11-10","title":"[1.1.2] - 2023-11-10","text":""},{"location":"Changelog/#added_24","title":"Added","text":"<ul> <li>Missing tests.</li> <li>Optimisations that can lead to 10x+ improvements in complex systems initiation speed.</li> </ul>"},{"location":"Changelog/#changed_39","title":"Changed","text":"<ul> <li>Clarification of vocabulary in ExplainableObject class: an ExplainableObject now links to its children, to follow a genealogical logic.</li> <li>Graph colors for more color blindness friendliness. Reach out if this is still unsatisfactory !</li> </ul>"},{"location":"Changelog/#fixed_52","title":"Fixed","text":"<ul> <li>Object link recomputation logic: the launch_attributes_computation_chain function in the ModelingObject class now allows for a breadth first exploration of the object link graph to recompute object attributes in the right order. </li> </ul>"},{"location":"Changelog/#111-2023-11-03","title":"[1.1.1] - 2023-11-03","text":""},{"location":"Changelog/#added_25","title":"Added","text":""},{"location":"Changelog/#changed_40","title":"Changed","text":""},{"location":"Changelog/#fixed_53","title":"Fixed","text":"<ul> <li>Possibility to have a null service as input for user journey steps (in cases when the user simply uses the device without any service call).</li> <li>UserJourney\u2019s add_step method didn\u2019t trigger setattr because of the use of the self.uj_steps.append(new_step) syntax, and hence didn\u2019t trigger the appropriate recomputation logic. Fixed by replacing it with the self.uj_steps = self.uj_steps + [new_step] syntax.</li> <li>graph_tools module doesn\u2019t depend any more on special selenium screenshot functions that are only used during development. Such functions have been moved to the dev_utils package that only contains modules not used in the project because they are work in progress or dev helper functions.</li> <li>Fixed the convert_to_utc_test that had broken because of time change  </li> </ul>"},{"location":"Changelog/#110-2023-10-26","title":"[1.1.0] - 2023-10-26","text":"<p>State of project at time of open sourcing.</p>"},{"location":"Changelog/#added_26","title":"Added","text":"<p>Full optimization of recomputation whenever an input or object relationship changes.</p>"},{"location":"Country/","title":"Country","text":""},{"location":"Country/#params","title":"Params","text":""},{"location":"Country/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Country/#short_name","title":"short_name","text":"<p>description to be done</p>"},{"location":"Country/#average_carbon_intensity","title":"average_carbon_intensity","text":"<p>Average carbon intensity of devices country in gram / kilowatt_hour.</p>"},{"location":"Country/#timezone","title":"timezone","text":"<p>description to be done</p>"},{"location":"Country/#backwards-links","title":"Backwards links","text":"<ul> <li>UsagePattern</li> </ul>"},{"location":"Country/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"Device/","title":"Device","text":""},{"location":"Device/#params","title":"Params","text":""},{"location":"Device/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Device/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>Carbon footprint fabrication of device on which the user journey is made in kilogram.</p>"},{"location":"Device/#power","title":"power","text":"<p>Power of device on which the user journey is made in watt.</p>"},{"location":"Device/#lifespan","title":"lifespan","text":"<p>Lifespan of device on which the user journey is made in year.</p>"},{"location":"Device/#fraction_of_usage_time","title":"fraction_of_usage_time","text":"<p>Device on which the user journey is made fraction of usage time in hour / day.</p>"},{"location":"Device/#backwards-links","title":"Backwards links","text":"<ul> <li>UsagePattern</li> </ul>"},{"location":"Device/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"EdgeDevice/","title":"EdgeDevice","text":""},{"location":"EdgeDevice/#params","title":"Params","text":""},{"location":"EdgeDevice/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"EdgeDevice/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>Carbon footprint fabrication of edge device in kilogram.</p>"},{"location":"EdgeDevice/#power","title":"power","text":"<p>Power of edge device in watt.</p>"},{"location":"EdgeDevice/#lifespan","title":"lifespan","text":"<p>Lifespan of edge device in year.</p>"},{"location":"EdgeDevice/#idle_power","title":"idle_power","text":"<p>Idle power of edge device in watt.</p>"},{"location":"EdgeDevice/#ram","title":"ram","text":"<p>Ram of edge device in gigabyte.</p>"},{"location":"EdgeDevice/#compute","title":"compute","text":"<p>Compute of edge device in cpu_core.</p>"},{"location":"EdgeDevice/#power_usage_effectiveness","title":"power_usage_effectiveness","text":"<p>Pue of edge device in dimensionless.</p>"},{"location":"EdgeDevice/#utilization_rate","title":"utilization_rate","text":"<p>Edge device utilization rate in dimensionless.</p>"},{"location":"EdgeDevice/#base_ram_consumption","title":"base_ram_consumption","text":"<p>Base ram consumption of edge device in gigabyte.</p>"},{"location":"EdgeDevice/#base_compute_consumption","title":"base_compute_consumption","text":"<p>Base compute consumption of edge device in cpu_core.</p>"},{"location":"EdgeDevice/#storage","title":"storage","text":"<p>An instance of EdgeStorage.</p>"},{"location":"EdgeDevice/#backwards-links","title":"Backwards links","text":"<ul> <li>EdgeUsageJourney</li> </ul>"},{"location":"EdgeDevice/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"EdgeDevice/#available_ram_per_instance","title":"available_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Available ram per edge device instance.  </p> <p>Example value: 11.8 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>RAM of edge device</li> <li>edge device utilization rate</li> <li>Base RAM consumption of edge device </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available RAM per edge device instance\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#available_compute_per_instance","title":"available_compute_per_instance","text":"<p>ExplainableQuantity in cpu_core, representing the Available compute per edge device instance.  </p> <p>Example value: 6.3 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Compute of edge device</li> <li>edge device utilization rate</li> <li>Base compute consumption of edge device </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available compute per edge device instance\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#unitary_hourly_ram_need_per_usage_pattern","title":"unitary_hourly_ram_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge device hourly ram need for default edge usage pattern as values, in gigabyte.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in GB:     first 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],     last 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process unitary hourly ram need for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device hourly RAM need for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#unitary_hourly_compute_need_per_usage_pattern","title":"unitary_hourly_compute_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge device hourly compute need for default edge usage pattern as values, in cpu_core.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in cpu_core:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process unitary hourly compute need for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device hourly compute need for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#nb_of_instances_per_usage_pattern","title":"nb_of_instances_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Number of edge device instances for default edge usage pattern as values, in dimensionless.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in dimensionless:     first 10 vals [-1.59, -3.41, -2.12, -2.5, -2.96, -3.34, -3.34, -1.9, 999.35, 1997.48],     last 10 vals [4998.94, 4997.12, 4995.91, 4996.51, 4998.94, 4997.73, 3995.88, 2996.45, 1997.63, 997.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Default edge usage pattern hourly nb of edge usage journeys in parallel </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Number of edge device instances for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#instances_fabrication_footprint_per_usage_pattern","title":"instances_fabrication_footprint_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly edge device instances fabrication footprint for default edge usage pattern as values, in kilogram.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in kg:     first 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.86, 1.71],     last 10 vals [4.28, 4.28, 4.27, 4.27, 4.28, 4.28, 3.42, 2.56, 1.71, 0.85],  }  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge device instances for Default edge usage pattern</li> <li>Carbon footprint fabrication of edge device</li> <li>Lifespan of edge device </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly edge device instances fabrication footprint for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#unitary_power_per_usage_pattern","title":"unitary_power_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge device unitary power for default edge usage pattern as values, in watt.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in W:     first 10 vals [8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44],     last 10 vals [8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44, 8.44],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge device hourly compute need for Default edge usage pattern</li> <li>Base compute consumption of edge device</li> <li>Compute of edge device</li> <li>Power of edge device</li> <li>Idle power of edge device</li> <li>PUE of edge device </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device unitary power for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#instances_energy_per_usage_pattern","title":"instances_energy_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly energy consumed by edge device instances for default edge usage pattern as values, in hour * watt.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in h * W:     first 10 vals [-13.44, -28.8, -17.92, -21.12, -24.96, -28.16, -28.16, -16.0, 8432.0, 16853.76],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge device instances for Default edge usage pattern</li> <li>edge device unitary power for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly energy consumed by edge device instances for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#energy_footprint_per_usage_pattern","title":"energy_footprint_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge device energy footprint for default edge usage pattern as values, in gram * hour * watt / kilowatt_hour.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in g * h * W / kWh:     first 10 vals [-1142.4, -2448.0, -1523.2, -1795.2, -2121.6, -2393.6, -2393.6, -1360.0, 716720.0, 1.4325696e+06],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by edge device instances for Default edge usage pattern</li> <li>Average carbon intensity of devices country </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device energy footprint for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#nb_of_instances","title":"nb_of_instances","text":"<p>Edge device total instances across usage patterns in dimensionless.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in dimensionless:     first 10 vals [-1.59, -3.41, -2.12, -2.5, -2.96, -3.34, -3.34, -1.9, 999.35, 1997.48],     last 10 vals [4998.94, 4997.12, 4995.91, 4996.51, 4998.94, 4997.73, 3995.88, 2996.45, 1997.63, 997.0]  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge device instances for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device total instances across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Edge device total fabrication footprint across usage patterns in kilogram.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in kg:     first 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.86, 1.71],     last 10 vals [4.28, 4.28, 4.27, 4.27, 4.28, 4.28, 3.42, 2.56, 1.71, 0.85]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly edge device instances fabrication footprint for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device total fabrication footprint across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#instances_energy","title":"instances_energy","text":"<p>Edge device total instances energy across usage patterns in hour * watt.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in h * W:     first 10 vals [-13.44, -28.8, -17.92, -21.12, -24.96, -28.16, -28.16, -16.0, 8432.0, 16853.76],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by edge device instances for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device total instances energy across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeDevice/#energy_footprint","title":"energy_footprint","text":"<p>Edge device total energy footprint across usage patterns in gram * hour * watt / kilowatt_hour.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in g * h * W / kWh:     first 10 vals [-1142.4, -2448.0, -1523.2, -1795.2, -2121.6, -2393.6, -2393.6, -1360.0, 716720.0, 1.4325696e+06],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>edge device energy footprint for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge device total energy footprint across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/","title":"EdgeStorage","text":""},{"location":"EdgeStorage/#params","title":"Params","text":""},{"location":"EdgeStorage/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"EdgeStorage/#storage_capacity","title":"storage_capacity","text":"<p>Storage capacity of edge ssd storage in gigabyte.</p>"},{"location":"EdgeStorage/#carbon_footprint_fabrication_per_storage_capacity","title":"carbon_footprint_fabrication_per_storage_capacity","text":"<p>Fabrication carbon footprint of edge ssd storage per storage capacity in kilogram / terabyte.</p>"},{"location":"EdgeStorage/#power_per_storage_capacity","title":"power_per_storage_capacity","text":"<p>Power of edge ssd storage per storage capacity in watt / terabyte.</p>"},{"location":"EdgeStorage/#idle_power","title":"idle_power","text":"<p>Idle power of edge ssd storage in watt.</p>"},{"location":"EdgeStorage/#base_storage_need","title":"base_storage_need","text":"<p>Edge ssd storage initial storage need in gigabyte.</p>"},{"location":"EdgeStorage/#lifespan","title":"lifespan","text":"<p>Lifespan of edge ssd storage in year.</p>"},{"location":"EdgeStorage/#backwards-links","title":"Backwards links","text":"<ul> <li>EdgeDevice</li> </ul>"},{"location":"EdgeStorage/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"EdgeStorage/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>ExplainableQuantity in gigabyte * kilogram / terabyte, representing the Carbon footprint of edge ssd storage.  </p> <p>Example value: 40960.0 gigabyte * kilogram / terabyte  </p> <p>Depends directly on:  </p> <ul> <li>Fabrication carbon footprint of edge SSD storage per storage capacity</li> <li>Storage capacity of edge SSD storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Carbon footprint of edge SSD storage\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#power","title":"power","text":"<p>ExplainableQuantity in gigabyte * watt / terabyte, representing the Power of edge ssd storage.  </p> <p>Example value: 332.8 gigabyte * watt / terabyte  </p> <p>Depends directly on:  </p> <ul> <li>Power of edge SSD storage per storage capacity</li> <li>Storage capacity of edge SSD storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Power of edge SSD storage\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#unitary_storage_delta_per_usage_pattern","title":"unitary_storage_delta_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly storage delta for edge ssd storage in default edge usage pattern as values, in kilobyte.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in kB:     first 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0],     last 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process unitary hourly storage need for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage delta for edge SSD storage in Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#cumulative_unitary_storage_need_per_usage_pattern","title":"cumulative_unitary_storage_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Cumulative storage need for edge ssd storage in default edge usage pattern as values, in kilobyte.  </p> <p>Example value: { 3bc8ec: 52596 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 11:00:00+00:00 in kB:     first 10 vals [1.00002e+07, 1.00004e+07, 1.00006e+07, 1.00008e+07, 1.0001e+07, 1.00012e+07, 1.00014e+07, 1.00016e+07, 1.00018e+07, 1.0002e+07],     last 10 vals [2.05174e+07, 2.05176e+07, 2.05178e+07, 2.0518e+07, 2.05182e+07, 2.05184e+07, 2.05186e+07, 2.05188e+07, 2.0519e+07, 2.05192e+07],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage delta for edge SSD storage in Default edge usage pattern</li> <li>Usage span of edge usage journey</li> <li>edge SSD storage initial storage need </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Cumulative storage need for edge SSD storage in Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#nb_of_instances_per_usage_pattern","title":"nb_of_instances_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Number of edge ssd storage instances for default edge usage pattern as values, in dimensionless.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in dimensionless:     first 10 vals [-1.59, -3.41, -2.12, -2.5, -2.96, -3.34, -3.34, -1.9, 999.35, 1997.48],     last 10 vals [4998.94, 4997.12, 4995.91, 4996.51, 4998.94, 4997.73, 3995.88, 2996.45, 1997.63, 997.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Default edge usage pattern hourly nb of edge usage journeys in parallel </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Number of edge SSD storage instances for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#instances_fabrication_footprint_per_usage_pattern","title":"instances_fabrication_footprint_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly edge ssd storage instances fabrication footprint for default edge usage pattern as values, in kilogram.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in kg:     first 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.78, 1.56],     last 10 vals [3.89, 3.89, 3.89, 3.89, 3.89, 3.89, 3.11, 2.33, 1.56, 0.78],  }  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge SSD storage instances for Default edge usage pattern</li> <li>Carbon footprint of edge SSD storage</li> <li>Lifespan of edge SSD storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly edge SSD storage instances fabrication footprint for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#unitary_power_per_usage_pattern","title":"unitary_power_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly power for edge ssd storage in default edge usage pattern as values, in gigabyte * watt / terabyte.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in GB * W / TB:     first 10 vals [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0],     last 10 vals [100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0, 100.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage delta for edge SSD storage in Default edge usage pattern</li> <li>Storage capacity of edge SSD storage</li> <li>Power of edge SSD storage</li> <li>Idle power of edge SSD storage</li> <li>PUE of edge device </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly power for edge SSD storage in Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#instances_energy_per_usage_pattern","title":"instances_energy_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Hourly energy consumed by edge ssd storage instances for default edge usage pattern as values, in gigabyte * hour * watt / terabyte.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in GB * h * W / TB:     first 10 vals [-159.29, -341.33, -212.39, -250.31, -295.82, -333.75, -333.75, -189.63, 99935.0, 199748.62],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge SSD storage instances for Default edge usage pattern</li> <li>Hourly power for edge SSD storage in Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly energy consumed by edge SSD storage instances for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#energy_footprint_per_usage_pattern","title":"energy_footprint_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge ssd storage energy footprint for default edge usage pattern as values, in gigabyte * gram * hour * watt / kilowatt_hour / terabyte.  </p> <p>Example value: { 3bc8ec: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in GB * g * h * W / kWh / TB:     first 10 vals [-13539.58, -29013.39, -18052.77, -21276.48, -25144.93, -28368.64, -28368.64, -16118.55, 8.494475e+06, 1.6978634e+07],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by edge SSD storage instances for Default edge usage pattern</li> <li>Average carbon intensity of devices country </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge SSD storage energy footprint for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#nb_of_instances","title":"nb_of_instances","text":"<p>Edge ssd storage total instances across usage patterns in dimensionless.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in dimensionless:     first 10 vals [-1.59, -3.41, -2.12, -2.5, -2.96, -3.34, -3.34, -1.9, 999.35, 1997.48],     last 10 vals [4998.94, 4997.12, 4995.91, 4996.51, 4998.94, 4997.73, 3995.88, 2996.45, 1997.63, 997.0]  </p> <p>Depends directly on:  </p> <ul> <li>Number of edge SSD storage instances for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge SSD storage total instances across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Edge ssd storage total fabrication footprint across usage patterns in kilogram.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in kg:     first 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, 0.78, 1.56],     last 10 vals [3.89, 3.89, 3.89, 3.89, 3.89, 3.89, 3.11, 2.33, 1.56, 0.78]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly edge SSD storage instances fabrication footprint for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge SSD storage total fabrication footprint across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#instances_energy","title":"instances_energy","text":"<p>Edge ssd storage total instances energy across usage patterns in gigabyte * hour * watt / terabyte.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in GB * h * W / TB:     first 10 vals [-159.29, -341.33, -212.39, -250.31, -295.82, -333.75, -333.75, -189.63, 99935.0, 199748.62],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by edge SSD storage instances for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge SSD storage total instances energy across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeStorage/#energy_footprint","title":"energy_footprint","text":"<p>Edge ssd storage total energy footprint across usage patterns in gigabyte * gram * hour * watt / kilowatt_hour / terabyte.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in GB * g * h * W / kWh / TB:     first 10 vals [-13539.58, -29013.39, -18052.77, -21276.48, -25144.93, -28368.64, -28368.64, -16118.55, 8.494475e+06, 1.6978634e+07],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>edge SSD storage energy footprint for Default edge usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge SSD storage total energy footprint across usage patterns\u2019s full calculation graph.</p>"},{"location":"EdgeUsageJourney/","title":"EdgeUsageJourney","text":""},{"location":"EdgeUsageJourney/#params","title":"Params","text":""},{"location":"EdgeUsageJourney/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"EdgeUsageJourney/#edge_processes","title":"edge_processes","text":"<p>A list of RecurrentEdgeProcesss.</p>"},{"location":"EdgeUsageJourney/#edge_device","title":"edge_device","text":"<p>An instance of EdgeDevice.</p>"},{"location":"EdgeUsageJourney/#usage_span","title":"usage_span","text":"<p>Usage span of edge usage journey in year.</p>"},{"location":"EdgeUsageJourney/#backwards-links","title":"Backwards links","text":"<ul> <li>EdgeUsagePattern</li> </ul>"},{"location":"EdgeUsageJourney/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"EdgeUsagePattern/","title":"EdgeUsagePattern","text":""},{"location":"EdgeUsagePattern/#params","title":"Params","text":""},{"location":"EdgeUsagePattern/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"EdgeUsagePattern/#edge_usage_journey","title":"edge_usage_journey","text":"<p>An instance of EdgeUsageJourney.</p>"},{"location":"EdgeUsagePattern/#country","title":"country","text":"<p>An instance of Country.</p>"},{"location":"EdgeUsagePattern/#hourly_edge_usage_journey_starts","title":"hourly_edge_usage_journey_starts","text":"<p>Default edge usage pattern hourly nb of edge device starts from e-footprint hypothesis, in hourly timeseries data.</p>"},{"location":"EdgeUsagePattern/#backwards-links","title":"Backwards links","text":"<ul> <li>System</li> </ul>"},{"location":"EdgeUsagePattern/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"EdgeUsagePattern/#utc_hourly_edge_usage_journey_starts","title":"utc_hourly_edge_usage_journey_starts","text":"<p>Default edge usage pattern utc in dimensionless.  </p> <p>Example value: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1000.0, 1000.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 1000.0, 1000.0, 1000.0, 1000.0, 1000.0]  </p> <p>Depends directly on:  </p> <ul> <li>Default edge usage pattern hourly nb of edge device starts from e-footprint hypothesis</li> <li>devices country timezone from user data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Default edge usage pattern UTC\u2019s full calculation graph.</p>"},{"location":"EdgeUsagePattern/#nb_edge_usage_journeys_in_parallel","title":"nb_edge_usage_journeys_in_parallel","text":"<p>Default edge usage pattern hourly nb of edge usage journeys in parallel in dimensionless.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in dimensionless:     first 10 vals [-1.59, -3.41, -2.12, -2.5, -2.96, -3.34, -3.34, -1.9, 999.35, 1997.48],     last 10 vals [4998.94, 4997.12, 4995.91, 4996.51, 4998.94, 4997.73, 3995.88, 2996.45, 1997.63, 997.0]  </p> <p>Depends directly on:  </p> <ul> <li>Default edge usage pattern UTC</li> <li>Usage span of edge usage journey </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Default edge usage pattern hourly nb of edge usage journeys in parallel\u2019s full calculation graph.</p>"},{"location":"GPUJob/","title":"GPUJob","text":""},{"location":"GPUJob/#params","title":"Params","text":""},{"location":"GPUJob/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"GPUJob/#server","title":"server","text":"<p>An instance of GPUServer.</p>"},{"location":"GPUJob/#data_transferred","title":"data_transferred","text":"<p>Sum of all data uploads and downloads for request manually defined gpu job from e-footprint hypothesis in kilobyte.</p>"},{"location":"GPUJob/#data_stored","title":"data_stored","text":"<p>Data stored by request manually defined gpu job from e-footprint hypothesis in kilobyte.</p>"},{"location":"GPUJob/#request_duration","title":"request_duration","text":"<p>Request duration of manually defined gpu job from e-footprint hypothesis in second.</p>"},{"location":"GPUJob/#compute_needed","title":"compute_needed","text":"<p>Gpus needed on server on premise gpu server to process manually defined gpu job from e-footprint hypothesis in gpu.</p>"},{"location":"GPUJob/#ram_needed","title":"ram_needed","text":"<p>Ram needed on server on premise gpu server to process manually defined gpu job from e-footprint hypothesis in megabyte.</p>"},{"location":"GPUJob/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourneyStep</li> </ul>"},{"location":"GPUJob/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"GPUJob/#hourly_occurrences_per_usage_pattern","title":"hourly_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly manually defined gpu job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined GPU job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_avg_occurrences_per_usage_pattern","title":"hourly_avg_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Average hourly manually defined gpu job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined GPU job occurrences in usage pattern</li> <li>Request duration of Manually defined GPU job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Average hourly Manually defined GPU job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_data_transferred_per_usage_pattern","title":"hourly_data_transferred_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data transferred for manually defined gpu job in usage pattern as values, in hour * kilobyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.29, 0.38, 0.25, 0.12, 0.25, 0.33, 0.38, 0.12, 0.17, 0.25],     last 10 vals [0.25, 0.29, 0.21, 0.08, 0.33, 0.21, 0.25, 0.17, 0.38, 0.12],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined GPU job occurrences in usage pattern</li> <li>Sum of all data uploads and downloads for request Manually defined GPU job from e-footprint hypothesis</li> <li>Request duration of Manually defined GPU job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data transferred for Manually defined GPU job in usage pattern\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_data_stored_per_usage_pattern","title":"hourly_data_stored_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data stored for manually defined gpu job in usage pattern as values, in hour * kilobyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined GPU job occurrences in usage pattern</li> <li>Data stored by request Manually defined GPU job from e-footprint hypothesis</li> <li>Request duration of Manually defined GPU job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data stored for Manually defined GPU job in usage pattern\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_avg_occurrences_across_usage_patterns","title":"hourly_avg_occurrences_across_usage_patterns","text":"<p>Hourly manually defined gpu job average occurrences across usage patterns in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined GPU job occurrences in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined GPU job average occurrences across usage patterns\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_data_transferred_across_usage_patterns","title":"hourly_data_transferred_across_usage_patterns","text":"<p>Hourly manually defined gpu job data transferred across usage patterns in hour * kilobyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.29, 0.38, 0.25, 0.12, 0.25, 0.33, 0.38, 0.12, 0.17, 0.25],     last 10 vals [0.25, 0.29, 0.21, 0.08, 0.33, 0.21, 0.25, 0.17, 0.38, 0.12]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Manually defined GPU job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined GPU job data transferred across usage patterns\u2019s full calculation graph.</p>"},{"location":"GPUJob/#hourly_data_stored_across_usage_patterns","title":"hourly_data_stored_across_usage_patterns","text":"<p>Hourly manually defined gpu job data stored across usage patterns in hour * kilobyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data stored for Manually defined GPU job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined GPU job data stored across usage patterns\u2019s full calculation graph.</p>"},{"location":"GPUServer/","title":"GPUServer","text":""},{"location":"GPUServer/#params","title":"Params","text":""},{"location":"GPUServer/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"GPUServer/#server_type","title":"server_type","text":"<p>description to be done</p>"},{"location":"GPUServer/#gpu_power","title":"gpu_power","text":"<p>On premise gpu server gpu power from estimating the carbon footprint of bloom in watt / gpu.</p>"},{"location":"GPUServer/#gpu_idle_power","title":"gpu_idle_power","text":"<p>On premise gpu server gpu idle power from estimating the carbon footprint of bloom in watt / gpu.</p>"},{"location":"GPUServer/#ram_per_gpu","title":"ram_per_gpu","text":"<p>On premise gpu server ram per gpu from estimating the carbon footprint of bloom in gigabyte / gpu.</p>"},{"location":"GPUServer/#carbon_footprint_fabrication_per_gpu","title":"carbon_footprint_fabrication_per_gpu","text":"<p>On premise gpu server carbon footprint one gpu from estimating the carbon footprint of bloom in kilogram / gpu.</p>"},{"location":"GPUServer/#average_carbon_intensity","title":"average_carbon_intensity","text":"<p>Average carbon intensity of on premise gpu server electricity in gram / kilowatt_hour.</p>"},{"location":"GPUServer/#compute","title":"compute","text":"<p>Nb gpus of on premise gpu server from e-footprint hypothesis in gpu.</p>"},{"location":"GPUServer/#carbon_footprint_fabrication_without_gpu","title":"carbon_footprint_fabrication_without_gpu","text":"<p>On premise gpu server carbon footprint without gpu from estimating the carbon footprint of bloom in kilogram.</p>"},{"location":"GPUServer/#lifespan","title":"lifespan","text":"<p>Lifespan of on premise gpu server in year.</p>"},{"location":"GPUServer/#power_usage_effectiveness","title":"power_usage_effectiveness","text":"<p>Pue of on premise gpu server in dimensionless.</p>"},{"location":"GPUServer/#utilization_rate","title":"utilization_rate","text":"<p>On premise gpu server utilization rate in dimensionless.</p>"},{"location":"GPUServer/#base_compute_consumption","title":"base_compute_consumption","text":"<p>Base gpu consumption of on premise gpu server from e-footprint hypothesis in gpu.</p>"},{"location":"GPUServer/#base_ram_consumption","title":"base_ram_consumption","text":"<p>Base ram consumption of on premise gpu server from e-footprint hypothesis in gigabyte.</p>"},{"location":"GPUServer/#storage","title":"storage","text":"<p>An instance of Storage.</p>"},{"location":"GPUServer/#fixed_nb_of_instances","title":"fixed_nb_of_instances","text":"<p>User defined number of on premise gpu server instances. Can be an EmptyExplainableObject in which case the optimum number of instances will be computed, or an ExplainableQuantity with a dimensionless value, in which case e-footprint will raise an error if the object needs more instances than available.</p>"},{"location":"GPUServer/#backwards-links","title":"Backwards links","text":"<ul> <li> <p>GPUJob</p> </li> <li> <p>GenAIModel</p> </li> </ul>"},{"location":"GPUServer/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"GPUServer/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>ExplainableQuantity in kilogram, representing the On premise gpu server carbon footprint fabrication.  </p> <p>Example value: 3100.0 kilogram  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server carbon footprint without GPU from Estimating the Carbon Footprint of BLOOM</li> <li>Nb gpus of on premise GPU server from e-footprint hypothesis</li> <li>on premise GPU server carbon footprint one GPU from Estimating the Carbon Footprint of BLOOM </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server carbon footprint fabrication\u2019s full calculation graph.</p>"},{"location":"GPUServer/#power","title":"power","text":"<p>ExplainableQuantity in watt, representing the On premise gpu server power.  </p> <p>Example value: 1600.0 watt  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server GPU power from Estimating the Carbon Footprint of BLOOM</li> <li>Nb gpus of on premise GPU server from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server power\u2019s full calculation graph.</p>"},{"location":"GPUServer/#idle_power","title":"idle_power","text":"<p>ExplainableQuantity in watt, representing the On premise gpu server idle power.  </p> <p>Example value: 200.0 watt  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server GPU idle power from Estimating the Carbon Footprint of BLOOM</li> <li>Nb gpus of on premise GPU server from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server idle power\u2019s full calculation graph.</p>"},{"location":"GPUServer/#ram","title":"ram","text":"<p>ExplainableQuantity in gigabyte, representing the On premise gpu server ram.  </p> <p>Example value: 320.0 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server RAM per GPU from Estimating the Carbon Footprint of BLOOM</li> <li>Nb gpus of on premise GPU server from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server RAM\u2019s full calculation graph.</p>"},{"location":"GPUServer/#hour_by_hour_ram_need","title":"hour_by_hour_ram_need","text":"<p>On premise gpu server hour by hour ram need in gigabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined GPU job average occurrences across usage patterns</li> <li>RAM needed on server on premise GPU server to process Manually defined GPU job from e-footprint hypothesis</li> <li>Hourly Generative AI model job average occurrences across usage patterns</li> <li>No additional GPU RAM needed because model is already loaded in memory from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server hour by hour ram need\u2019s full calculation graph.</p>"},{"location":"GPUServer/#hour_by_hour_compute_need","title":"hour_by_hour_compute_need","text":"<p>On premise gpu server hour by hour compute need in gpu.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in gpu:     first 10 vals [0.01, 0.02, 0.01, 0.01, 0.01, 0.02, 0.02, 0.01, 0.01, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.0, 0.02, 0.01, 0.01, 0.01, 0.02, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined GPU job average occurrences across usage patterns</li> <li>gpus needed on server on premise GPU server to process Manually defined GPU job from e-footprint hypothesis</li> <li>Hourly Generative AI model job average occurrences across usage patterns</li> <li>Generative AI model job nb of required GPUs during inference </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to on premise GPU server hour by hour compute need\u2019s full calculation graph.</p>"},{"location":"GPUServer/#occupied_ram_per_instance","title":"occupied_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Occupied ram per on premise gpu server instance including services.  </p> <p>Example value: 17.52 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>Base RAM consumption of on premise GPU server from e-footprint hypothesis</li> <li>Generative AI model base RAM consumption </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied RAM per on premise GPU server instance including services\u2019s full calculation graph.</p>"},{"location":"GPUServer/#occupied_compute_per_instance","title":"occupied_compute_per_instance","text":"<p>ExplainableQuantity in gpu, representing the Occupied cpu per on premise gpu server instance including services.  </p> <p>Example value: 0.0 gpu  </p> <p>Depends directly on:  </p> <ul> <li>Base gpu consumption of on premise GPU server from e-footprint hypothesis</li> <li>no value </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied CPU per on premise GPU server instance including services\u2019s full calculation graph.</p>"},{"location":"GPUServer/#available_ram_per_instance","title":"available_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Available ram per on premise gpu server instance.  </p> <p>Example value: 270.48 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server RAM</li> <li>on premise GPU server utilization rate</li> <li>Occupied RAM per on premise GPU server instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available RAM per on premise GPU server instance\u2019s full calculation graph.</p>"},{"location":"GPUServer/#available_compute_per_instance","title":"available_compute_per_instance","text":"<p>ExplainableQuantity in gpu, representing the Available cpu per on premise gpu server instance.  </p> <p>Example value: 3.6 gpu  </p> <p>Depends directly on:  </p> <ul> <li>Nb gpus of on premise GPU server from e-footprint hypothesis</li> <li>on premise GPU server utilization rate</li> <li>Occupied CPU per on premise GPU server instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available CPU per on premise GPU server instance\u2019s full calculation graph.</p>"},{"location":"GPUServer/#raw_nb_of_instances","title":"raw_nb_of_instances","text":"<p>Hourly raw number of on premise gpu server instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>on premise GPU server hour by hour ram need</li> <li>Available RAM per on premise GPU server instance</li> <li>on premise GPU server hour by hour compute need</li> <li>Available CPU per on premise GPU server instance </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly raw number of on premise GPU server instances\u2019s full calculation graph.</p>"},{"location":"GPUServer/#nb_of_instances","title":"nb_of_instances","text":"<p>Hourly number of on premise gpu server instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly raw number of on premise GPU server instances</li> <li>User defined number of on premise GPU server instances</li> <li>Server type of on premise GPU server from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly number of on premise GPU server instances\u2019s full calculation graph.</p>"},{"location":"GPUServer/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Hourly on premise gpu server instances fabrication footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06],     last 10 vals [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of on premise GPU server instances</li> <li>on premise GPU server carbon footprint fabrication</li> <li>Lifespan of on premise GPU server </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly on premise GPU server instances fabrication footprint\u2019s full calculation graph.</p>"},{"location":"GPUServer/#instances_energy","title":"instances_energy","text":"<p>Hourly energy consumed by on premise gpu server instances in kilowatt_hour.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:     first 10 vals [0.25, 0.25, 0.25, 0.24, 0.25, 0.25, 0.25, 0.24, 0.24, 0.25],     last 10 vals [0.25, 0.25, 0.24, 0.24, 0.25, 0.24, 0.25, 0.24, 0.25, 0.24]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of on premise GPU server instances</li> <li>on premise GPU server idle power</li> <li>PUE of on premise GPU server</li> <li>Hourly raw number of on premise GPU server instances</li> <li>on premise GPU server power </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly energy consumed by on premise GPU server instances\u2019s full calculation graph.</p>"},{"location":"GPUServer/#energy_footprint","title":"energy_footprint","text":"<p>Hourly on premise gpu server energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02],     last 10 vals [0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02, 0.02]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by on premise GPU server instances</li> <li>Average carbon intensity of on premise GPU server electricity </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly on premise GPU server energy footprint\u2019s full calculation graph.</p>"},{"location":"GenAIJob/","title":"GenAIJob","text":""},{"location":"GenAIJob/#params","title":"Params","text":""},{"location":"GenAIJob/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"GenAIJob/#service","title":"service","text":"<p>An instance of GenAIModel.</p>"},{"location":"GenAIJob/#output_token_count","title":"output_token_count","text":"<p>Generative ai model job output token count from e-footprint hypothesis in dimensionless.</p>"},{"location":"GenAIJob/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourneyStep</li> </ul>"},{"location":"GenAIJob/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"GenAIJob/#output_token_weights","title":"output_token_weights","text":"<p>ExplainableQuantity in kilobyte, representing the Generative ai model job output token weights.  </p> <p>Example value: 3.0 kilobyte  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model job output token count from e-footprint hypothesis</li> <li>Number of bits per token from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model job output token weights\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#data_stored","title":"data_stored","text":"<p>ExplainableQuantity in kilobyte, representing the Generative ai model job data stored.  </p> <p>Example value: 103.0 kilobyte  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model job output token weights </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model job data stored\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#data_transferred","title":"data_transferred","text":"<p>ExplainableQuantity in kilobyte, representing the Generative ai model job data transferred.  </p> <p>Example value: 103.0 kilobyte  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model job output token weights </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model job data transferred\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#request_duration","title":"request_duration","text":"<p>ExplainableQuantity in nanosecond, representing the Generative ai model job request duration.  </p> <p>Example value: 28154600000.0 nanosecond  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model job output token count from e-footprint hypothesis</li> <li>GPU latency per active parameter and output token from Ecologits</li> <li>open-mistral-7b from mistralai nb of active parameters from Ecologits</li> <li>Base GPU latency per output_token from Ecologits </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model job request duration\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#ram_needed","title":"ram_needed","text":"<p>ExplainableQuantity in gigabyte, representing the No additional gpu ram needed because model is already loaded in memory from e-footprint hypothesis.  </p> <p>Example value: 0.0 gigabyte  </p> <p>Depends directly on:  </p> <p>through the following calculations:  </p> <p>You can also visit the link to No additional GPU RAM needed because model is already loaded in memory from e-footprint hypothesis\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#compute_needed","title":"compute_needed","text":"<p>ExplainableQuantity in gpu, representing the Generative ai model job nb of required gpus during inference.  </p> <p>Example value: 0.22 gpu  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model ratio between GPU memory footprint and model size from Ecologits</li> <li>open-mistral-7b from mistralai nb of active parameters from Ecologits</li> <li>Generative AI model nb of bits per parameter from e-footprint hypothesis</li> <li>on premise GPU server RAM per GPU from Estimating the Carbon Footprint of BLOOM </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model job nb of required GPUs during inference\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_occurrences_per_usage_pattern","title":"hourly_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly generative ai model job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Generative AI model job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_avg_occurrences_per_usage_pattern","title":"hourly_avg_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Average hourly generative ai model job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.05, 0.07, 0.05, 0.02, 0.05, 0.06, 0.07, 0.02, 0.03, 0.05],     last 10 vals [0.05, 0.05, 0.04, 0.02, 0.06, 0.04, 0.05, 0.03, 0.07, 0.02],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Generative AI model job occurrences in usage pattern</li> <li>Generative AI model job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Average hourly Generative AI model job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_data_transferred_per_usage_pattern","title":"hourly_data_transferred_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data transferred for generative ai model job in usage pattern as values, in hour * kilobyte / nanosecond.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / ns:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Generative AI model job occurrences in usage pattern</li> <li>Generative AI model job data transferred</li> <li>Generative AI model job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data transferred for Generative AI model job in usage pattern\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_data_stored_per_usage_pattern","title":"hourly_data_stored_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data stored for generative ai model job in usage pattern as values, in hour * kilobyte / nanosecond.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / ns:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Generative AI model job occurrences in usage pattern</li> <li>Generative AI model job data stored</li> <li>Generative AI model job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data stored for Generative AI model job in usage pattern\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_avg_occurrences_across_usage_patterns","title":"hourly_avg_occurrences_across_usage_patterns","text":"<p>Hourly generative ai model job average occurrences across usage patterns in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.05, 0.07, 0.05, 0.02, 0.05, 0.06, 0.07, 0.02, 0.03, 0.05],     last 10 vals [0.05, 0.05, 0.04, 0.02, 0.06, 0.04, 0.05, 0.03, 0.07, 0.02]  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Generative AI model job occurrences in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Generative AI model job average occurrences across usage patterns\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_data_transferred_across_usage_patterns","title":"hourly_data_transferred_across_usage_patterns","text":"<p>Hourly generative ai model job data transferred across usage patterns in hour * kilobyte / nanosecond.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / ns:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Generative AI model job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Generative AI model job data transferred across usage patterns\u2019s full calculation graph.</p>"},{"location":"GenAIJob/#hourly_data_stored_across_usage_patterns","title":"hourly_data_stored_across_usage_patterns","text":"<p>Hourly generative ai model job data stored across usage patterns in hour * kilobyte / nanosecond.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / ns:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data stored for Generative AI model job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Generative AI model job data stored across usage patterns\u2019s full calculation graph.</p>"},{"location":"GenAIModel/","title":"GenAIModel","text":""},{"location":"GenAIModel/#params","title":"Params","text":""},{"location":"GenAIModel/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"GenAIModel/#provider","title":"provider","text":"<p>description to be done</p>"},{"location":"GenAIModel/#model_name","title":"model_name","text":"<p>description to be done</p>"},{"location":"GenAIModel/#server","title":"server","text":"<p>An instance of GPUServer.</p>"},{"location":"GenAIModel/#nb_of_bits_per_parameter","title":"nb_of_bits_per_parameter","text":"<p>Generative ai model nb of bits per parameter from e-footprint hypothesis in dimensionless.</p>"},{"location":"GenAIModel/#llm_memory_factor","title":"llm_memory_factor","text":"<p>Generative ai model ratio between gpu memory footprint and model size from ecologits in dimensionless.</p>"},{"location":"GenAIModel/#gpu_latency_alpha","title":"gpu_latency_alpha","text":"<p>Gpu latency per active parameter and output token from ecologits in nanosecond.</p>"},{"location":"GenAIModel/#gpu_latency_beta","title":"gpu_latency_beta","text":"<p>Base gpu latency per output_token from ecologits in second.</p>"},{"location":"GenAIModel/#bits_per_token","title":"bits_per_token","text":"<p>Number of bits per token from e-footprint hypothesis in dimensionless.</p>"},{"location":"GenAIModel/#backwards-links","title":"Backwards links","text":"<ul> <li>GenAIJob</li> </ul>"},{"location":"GenAIModel/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"GenAIModel/#active_params","title":"active_params","text":"<p>ExplainableQuantity in dimensionless, representing the Open-mistral-7b from mistralai nb of active parameters from ecologits.  </p> <p>Example value: 7300000000.0 dimensionless  </p> <p>Depends directly on:  </p> <ul> <li>mistralai from e-footprint hypothesis</li> <li>mistralai model used from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to open-mistral-7b from mistralai nb of active parameters from Ecologits\u2019s full calculation graph.</p>"},{"location":"GenAIModel/#total_params","title":"total_params","text":"<p>ExplainableQuantity in dimensionless, representing the Open-mistral-7b from mistralai total nb of parameters from ecologits.  </p> <p>Example value: 7300000000.0 dimensionless  </p> <p>Depends directly on:  </p> <ul> <li>mistralai from e-footprint hypothesis</li> <li>mistralai model used from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to open-mistral-7b from mistralai total nb of parameters from Ecologits\u2019s full calculation graph.</p>"},{"location":"GenAIModel/#base_ram_consumption","title":"base_ram_consumption","text":"<p>ExplainableQuantity in gigabyte, representing the Generative ai model base ram consumption.  </p> <p>Example value: 17.52 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>Generative AI model ratio between GPU memory footprint and model size from Ecologits</li> <li>open-mistral-7b from mistralai total nb of parameters from Ecologits</li> <li>Generative AI model nb of bits per parameter from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Generative AI model base RAM consumption\u2019s full calculation graph.</p>"},{"location":"Job/","title":"Job","text":""},{"location":"Job/#params","title":"Params","text":""},{"location":"Job/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Job/#server","title":"server","text":"<p>An instance of Server.</p>"},{"location":"Job/#data_transferred","title":"data_transferred","text":"<p>Sum of all data uploads and downloads for request manually defined job from e-footprint hypothesis in kilobyte.</p>"},{"location":"Job/#data_stored","title":"data_stored","text":"<p>Data stored by request manually defined job from e-footprint hypothesis in kilobyte.</p>"},{"location":"Job/#request_duration","title":"request_duration","text":"<p>Request duration of manually defined job from e-footprint hypothesis in second.</p>"},{"location":"Job/#compute_needed","title":"compute_needed","text":"<p>Cpu cores needed on server server to process manually defined job from e-footprint hypothesis in cpu_core.</p>"},{"location":"Job/#ram_needed","title":"ram_needed","text":"<p>Ram needed on server server to process manually defined job from e-footprint hypothesis in megabyte.</p>"},{"location":"Job/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourneyStep</li> </ul>"},{"location":"Job/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"Job/#hourly_occurrences_per_usage_pattern","title":"hourly_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly manually defined job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_avg_occurrences_per_usage_pattern","title":"hourly_avg_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Average hourly manually defined job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined job occurrences in usage pattern</li> <li>Request duration of Manually defined job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Average hourly Manually defined job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_data_transferred_per_usage_pattern","title":"hourly_data_transferred_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data transferred for manually defined job in usage pattern as values, in hour * kilobyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.29, 0.38, 0.25, 0.12, 0.25, 0.33, 0.38, 0.12, 0.17, 0.25],     last 10 vals [0.25, 0.29, 0.21, 0.08, 0.33, 0.21, 0.25, 0.17, 0.38, 0.12],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined job occurrences in usage pattern</li> <li>Sum of all data uploads and downloads for request Manually defined job from e-footprint hypothesis</li> <li>Request duration of Manually defined job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data transferred for Manually defined job in usage pattern\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_data_stored_per_usage_pattern","title":"hourly_data_stored_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data stored for manually defined job in usage pattern as values, in hour * kilobyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined job occurrences in usage pattern</li> <li>Data stored by request Manually defined job from e-footprint hypothesis</li> <li>Request duration of Manually defined job from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data stored for Manually defined job in usage pattern\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_avg_occurrences_across_usage_patterns","title":"hourly_avg_occurrences_across_usage_patterns","text":"<p>Hourly manually defined job average occurrences across usage patterns in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Manually defined job occurrences in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined job average occurrences across usage patterns\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_data_transferred_across_usage_patterns","title":"hourly_data_transferred_across_usage_patterns","text":"<p>Hourly manually defined job data transferred across usage patterns in hour * kilobyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.29, 0.38, 0.25, 0.12, 0.25, 0.33, 0.38, 0.12, 0.17, 0.25],     last 10 vals [0.25, 0.29, 0.21, 0.08, 0.33, 0.21, 0.25, 0.17, 0.38, 0.12]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Manually defined job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined job data transferred across usage patterns\u2019s full calculation graph.</p>"},{"location":"Job/#hourly_data_stored_across_usage_patterns","title":"hourly_data_stored_across_usage_patterns","text":"<p>Hourly manually defined job data stored across usage patterns in hour * kilobyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data stored for Manually defined job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Manually defined job data stored across usage patterns\u2019s full calculation graph.</p>"},{"location":"Network/","title":"Network","text":""},{"location":"Network/#params","title":"Params","text":""},{"location":"Network/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Network/#bandwidth_energy_intensity","title":"bandwidth_energy_intensity","text":"<p>Bandwith energy intensity of network in kilowatt_hour / gigabyte.</p>"},{"location":"Network/#backwards-links","title":"Backwards links","text":"<ul> <li>UsagePattern</li> </ul>"},{"location":"Network/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"Network/#energy_footprint","title":"energy_footprint","text":"<p>Hourly network energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.03, 0.04, 0.02, 0.01, 0.02, 0.03, 0.04, 0.01, 0.02, 0.02],     last 10 vals [0.02, 0.03, 0.02, 0.01, 0.03, 0.02, 0.02, 0.02, 0.04, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Web application job in usage pattern</li> <li>Hourly data transferred for Video streaming job in usage pattern</li> <li>Hourly data transferred for Generative AI model job in usage pattern</li> <li>Hourly data transferred for Manually defined GPU job in usage pattern</li> <li>Hourly data transferred for Manually defined job in usage pattern</li> <li>bandwith energy intensity of network</li> <li>Average carbon intensity of devices country </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly network energy footprint\u2019s full calculation graph.</p>"},{"location":"RecurrentEdgeProcess/","title":"RecurrentEdgeProcess","text":""},{"location":"RecurrentEdgeProcess/#params","title":"Params","text":""},{"location":"RecurrentEdgeProcess/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"RecurrentEdgeProcess/#recurrent_compute_needed","title":"recurrent_compute_needed","text":"<p>Edge process recurrent compute needed, in typical week of hourly timeseries data, starting on Monday at midnight.</p> <p>For example, 168 values in cpu_core:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]</p>"},{"location":"RecurrentEdgeProcess/#recurrent_ram_needed","title":"recurrent_ram_needed","text":"<p>Edge process recurrent ram needed, in typical week of hourly timeseries data, starting on Monday at midnight.</p> <p>For example, 168 values in GB:     first 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],     last 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0]</p>"},{"location":"RecurrentEdgeProcess/#recurrent_storage_needed","title":"recurrent_storage_needed","text":"<p>Edge process recurrent storage needed, in typical week of hourly timeseries data, starting on Monday at midnight.</p> <p>For example, 168 values in kB:     first 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0],     last 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0]</p>"},{"location":"RecurrentEdgeProcess/#backwards-links","title":"Backwards links","text":"<ul> <li>EdgeUsageJourney</li> </ul>"},{"location":"RecurrentEdgeProcess/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"RecurrentEdgeProcess/#unitary_hourly_compute_need_per_usage_pattern","title":"unitary_hourly_compute_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge process unitary hourly compute need for default edge usage pattern as values, in cpu_core.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in cpu_core:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process recurrent compute needed</li> <li>Default edge usage pattern hourly nb of edge device starts from e-footprint hypothesis</li> <li>devices country timezone from user data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge process unitary hourly compute need for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"RecurrentEdgeProcess/#unitary_hourly_ram_need_per_usage_pattern","title":"unitary_hourly_ram_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge process unitary hourly ram need for default edge usage pattern as values, in gigabyte.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in GB:     first 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],     last 10 vals [2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process recurrent ram needed</li> <li>Default edge usage pattern hourly nb of edge device starts from e-footprint hypothesis</li> <li>devices country timezone from user data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge process unitary hourly ram need for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"RecurrentEdgeProcess/#unitary_hourly_storage_need_per_usage_pattern","title":"unitary_hourly_storage_need_per_usage_pattern","text":"<p>Dictionary with EdgeUsagePattern as keys and                          Edge process unitary hourly storage need for default edge usage pattern as values, in kilobyte.  </p> <p>Example value: { 3bc8ec: 52597 values from 2024-12-31 23:00:00+00:00 to 2031-01-01 12:00:00+00:00 in kB:     first 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0],     last 10 vals [200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0, 200.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>edge process recurrent storage needed</li> <li>Default edge usage pattern hourly nb of edge device starts from e-footprint hypothesis</li> <li>devices country timezone from user data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to edge process unitary hourly storage need for Default edge usage pattern\u2019s full calculation graph.</p>"},{"location":"Server/","title":"Server","text":""},{"location":"Server/#params","title":"Params","text":""},{"location":"Server/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Server/#server_type","title":"server_type","text":"<p>description to be done</p>"},{"location":"Server/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>Carbon footprint fabrication of server in kilogram.</p>"},{"location":"Server/#power","title":"power","text":"<p>Power of server in watt.</p>"},{"location":"Server/#lifespan","title":"lifespan","text":"<p>Lifespan of server in year.</p>"},{"location":"Server/#idle_power","title":"idle_power","text":"<p>Idle power of server in watt.</p>"},{"location":"Server/#ram","title":"ram","text":"<p>Ram of server in gigabyte.</p>"},{"location":"Server/#compute","title":"compute","text":"<p>Nb cpu cores of server in cpu_core.</p>"},{"location":"Server/#power_usage_effectiveness","title":"power_usage_effectiveness","text":"<p>Pue of server in dimensionless.</p>"},{"location":"Server/#average_carbon_intensity","title":"average_carbon_intensity","text":"<p>Average carbon intensity of server electricity in gram / kilowatt_hour.</p>"},{"location":"Server/#utilization_rate","title":"utilization_rate","text":"<p>Server utilization rate in dimensionless.</p>"},{"location":"Server/#base_ram_consumption","title":"base_ram_consumption","text":"<p>Base ram consumption of server in megabyte.</p>"},{"location":"Server/#base_compute_consumption","title":"base_compute_consumption","text":"<p>Base cpu core consumption of server in cpu_core.</p>"},{"location":"Server/#storage","title":"storage","text":"<p>An instance of Storage.</p>"},{"location":"Server/#fixed_nb_of_instances","title":"fixed_nb_of_instances","text":"<p>User defined number of server instances. Can be an EmptyExplainableObject in which case the optimum number of instances will be computed, or an ExplainableQuantity with a dimensionless value, in which case e-footprint will raise an error if the object needs more instances than available.</p>"},{"location":"Server/#backwards-links","title":"Backwards links","text":"<ul> <li> <p>VideoStreaming</p> </li> <li> <p>Job</p> </li> </ul>"},{"location":"Server/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"Server/#hour_by_hour_ram_need","title":"hour_by_hour_ram_need","text":"<p>Server hour by hour ram need in gigabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB:     first 10 vals [0.12, 0.15, 0.1, 0.05, 0.1, 0.13, 0.15, 0.05, 0.07, 0.1],     last 10 vals [0.1, 0.12, 0.08, 0.03, 0.13, 0.08, 0.1, 0.07, 0.15, 0.05]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined job average occurrences across usage patterns</li> <li>RAM needed on server server to process Manually defined job from e-footprint hypothesis</li> <li>Hourly Video streaming job average occurrences across usage patterns</li> <li>Video streaming job RAM needed </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to server hour by hour ram need\u2019s full calculation graph.</p>"},{"location":"Server/#hour_by_hour_compute_need","title":"hour_by_hour_compute_need","text":"<p>Server hour by hour compute need in cpu_core.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in cpu_core:     first 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.0, 0.0, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.0, 0.01, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined job average occurrences across usage patterns</li> <li>cpu cores needed on server server to process Manually defined job from e-footprint hypothesis</li> <li>Hourly Video streaming job average occurrences across usage patterns</li> <li>Video streaming job CPU needed </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to server hour by hour compute need\u2019s full calculation graph.</p>"},{"location":"Server/#occupied_ram_per_instance","title":"occupied_ram_per_instance","text":"<p>ExplainableQuantity in megabyte, representing the Occupied ram per server instance including services.  </p> <p>Example value: 2300.0 megabyte  </p> <p>Depends directly on:  </p> <ul> <li>Base RAM consumption of server</li> <li>Video streaming service OS and streaming software base RAM consumption from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied RAM per server instance including services\u2019s full calculation graph.</p>"},{"location":"Server/#occupied_compute_per_instance","title":"occupied_compute_per_instance","text":"<p>ExplainableQuantity in cpu_core, representing the Occupied cpu per server instance including services.  </p> <p>Example value: 2.0 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Base cpu core consumption of server</li> <li>no value </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Occupied CPU per server instance including services\u2019s full calculation graph.</p>"},{"location":"Server/#available_ram_per_instance","title":"available_ram_per_instance","text":"<p>ExplainableQuantity in gigabyte, representing the Available ram per server instance.  </p> <p>Example value: 112.9 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>RAM of server</li> <li>server utilization rate</li> <li>Occupied RAM per server instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available RAM per server instance\u2019s full calculation graph.</p>"},{"location":"Server/#available_compute_per_instance","title":"available_compute_per_instance","text":"<p>ExplainableQuantity in cpu_core, representing the Available cpu per server instance.  </p> <p>Example value: 19.6 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Nb cpu cores of server</li> <li>server utilization rate</li> <li>Occupied CPU per server instance including services </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Available CPU per server instance\u2019s full calculation graph.</p>"},{"location":"Server/#raw_nb_of_instances","title":"raw_nb_of_instances","text":"<p>Hourly raw number of server instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>server hour by hour ram need</li> <li>Available RAM per server instance</li> <li>server hour by hour compute need</li> <li>Available CPU per server instance </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly raw number of server instances\u2019s full calculation graph.</p>"},{"location":"Server/#nb_of_instances","title":"nb_of_instances","text":"<p>Hourly number of server instances in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly raw number of server instances</li> <li>Server type of server from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly number of server instances\u2019s full calculation graph.</p>"},{"location":"Server/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Hourly server instances fabrication footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of server instances</li> <li>Carbon footprint fabrication of server</li> <li>Lifespan of server </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly server instances fabrication footprint\u2019s full calculation graph.</p>"},{"location":"Server/#instances_energy","title":"instances_energy","text":"<p>Hourly energy consumed by server instances in kilowatt_hour.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:     first 10 vals [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06],     last 10 vals [0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06, 0.06]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of server instances</li> <li>Idle power of server</li> <li>PUE of server</li> <li>Hourly raw number of server instances</li> <li>Power of server </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly energy consumed by server instances\u2019s full calculation graph.</p>"},{"location":"Server/#energy_footprint","title":"energy_footprint","text":"<p>Hourly server energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly energy consumed by server instances</li> <li>Average carbon intensity of server electricity </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly server energy footprint\u2019s full calculation graph.</p>"},{"location":"Storage/","title":"Storage","text":""},{"location":"Storage/#params","title":"Params","text":""},{"location":"Storage/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"Storage/#storage_capacity","title":"storage_capacity","text":"<p>Storage capacity of storage in terabyte.</p>"},{"location":"Storage/#carbon_footprint_fabrication_per_storage_capacity","title":"carbon_footprint_fabrication_per_storage_capacity","text":"<p>Fabrication carbon footprint of storage per storage capacity in kilogram / terabyte.</p>"},{"location":"Storage/#power_per_storage_capacity","title":"power_per_storage_capacity","text":"<p>Power of storage per storage capacity in watt / terabyte.</p>"},{"location":"Storage/#idle_power","title":"idle_power","text":"<p>Idle power of storage in watt.</p>"},{"location":"Storage/#data_replication_factor","title":"data_replication_factor","text":"<p>Data replication factor of storage in dimensionless.</p>"},{"location":"Storage/#data_storage_duration","title":"data_storage_duration","text":"<p>Data storage duration of storage in hour.</p>"},{"location":"Storage/#base_storage_need","title":"base_storage_need","text":"<p>Storage initial storage need in terabyte.</p>"},{"location":"Storage/#lifespan","title":"lifespan","text":"<p>Lifespan of storage in year.</p>"},{"location":"Storage/#fixed_nb_of_instances","title":"fixed_nb_of_instances","text":"<p>User defined number of storage instances. Can be an EmptyExplainableObject in which case the optimum number of instances will be computed, or an ExplainableQuantity with a dimensionless value, in which case e-footprint will raise an error if the object needs more instances than available.</p>"},{"location":"Storage/#backwards-links","title":"Backwards links","text":"<ul> <li>Server</li> </ul>"},{"location":"Storage/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"Storage/#carbon_footprint_fabrication","title":"carbon_footprint_fabrication","text":"<p>ExplainableQuantity in kilogram, representing the Carbon footprint of storage.  </p> <p>Example value: 160.0 kilogram  </p> <p>Depends directly on:  </p> <ul> <li>Fabrication carbon footprint of storage per storage capacity</li> <li>Storage capacity of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Carbon footprint of storage\u2019s full calculation graph.</p>"},{"location":"Storage/#power","title":"power","text":"<p>ExplainableQuantity in watt, representing the Power of storage.  </p> <p>Example value: 1.3 watt  </p> <p>Depends directly on:  </p> <ul> <li>Power of storage per storage capacity</li> <li>Storage capacity of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Power of storage\u2019s full calculation graph.</p>"},{"location":"Storage/#storage_needed","title":"storage_needed","text":"<p>Hourly storage storage need in terabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in TB:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Manually defined job data stored across usage patterns</li> <li>Hourly Video streaming job data stored across usage patterns</li> <li>Data replication factor of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage storage need\u2019s full calculation graph.</p>"},{"location":"Storage/#storage_freed","title":"storage_freed","text":"<p>Example value: no value  </p> <p>Depends directly on:  </p> <ul> <li>Data replication factor of storage</li> <li>Hourly Manually defined job data stored across usage patterns</li> <li>Hourly Video streaming job data stored across usage patterns </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage storage freed\u2019s full calculation graph.</p>"},{"location":"Storage/#automatic_storage_dumps_after_storage_duration","title":"automatic_storage_dumps_after_storage_duration","text":"<p>Storage dumps for storage in terabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in TB:     first 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0],     last 10 vals [-0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0, -0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage storage need</li> <li>Data storage duration of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Storage dumps for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#storage_delta","title":"storage_delta","text":"<p>Hourly storage delta for storage in terabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in TB:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0, 0.0, 0.0, -0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage storage need</li> <li>Hourly storage storage freed</li> <li>Storage dumps for storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage delta for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#full_cumulative_storage_need","title":"full_cumulative_storage_need","text":"<p>Full cumulative storage need for storage in terabyte.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in TB:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage delta for storage</li> <li>storage initial storage need </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Full cumulative storage need for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#raw_nb_of_instances","title":"raw_nb_of_instances","text":"<p>Hourly raw number of instances for storage in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03, 0.03]  </p> <p>Depends directly on:  </p> <ul> <li>Full cumulative storage need for storage</li> <li>Storage capacity of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly raw number of instances for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#nb_of_instances","title":"nb_of_instances","text":"<p>Hourly number of instances for storage in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],     last 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly raw number of instances for storage</li> <li>User defined number of storage instances </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly number of instances for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#nb_of_active_instances","title":"nb_of_active_instances","text":"<p>Hourly number of active instances for storage in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly storage storage need</li> <li>Hourly storage storage freed</li> <li>Storage dumps for storage</li> <li>Storage capacity of storage</li> <li>Hourly number of instances for storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly number of active instances for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Hourly storage instances fabrication footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of instances for storage</li> <li>Carbon footprint of storage</li> <li>Lifespan of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage instances fabrication footprint\u2019s full calculation graph.</p>"},{"location":"Storage/#instances_energy","title":"instances_energy","text":"<p>Storage energy for storage in kilowatt_hour.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly number of active instances for storage</li> <li>Power of storage</li> <li>PUE of server</li> <li>Hourly number of instances for storage</li> <li>Idle power of storage </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Storage energy for storage\u2019s full calculation graph.</p>"},{"location":"Storage/#energy_footprint","title":"energy_footprint","text":"<p>Hourly storage energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Storage energy for storage</li> <li>Average carbon intensity of server electricity </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly storage energy footprint\u2019s full calculation graph.</p>"},{"location":"System/","title":"System","text":""},{"location":"System/#params","title":"Params","text":""},{"location":"System/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"System/#usage_patterns","title":"usage_patterns","text":"<p>A list of UsagePatterns.</p>"},{"location":"System/#edge_usage_patterns","title":"edge_usage_patterns","text":"<p>A list of EdgeUsagePatterns.</p>"},{"location":"System/#backwards-links","title":"Backwards links","text":""},{"location":"System/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"System/#total_footprint","title":"total_footprint","text":"<p>System total carbon footprint in kilogram.  </p> <p>Example value: 105192 values from 2024-12-31 23:00:00+00:00 to 2036-12-31 23:00:00+00:00 in kg:     first 10 vals [0.17, 0.18, 0.16, 0.13, 0.16, 0.17, 0.18, 0.13, 2.5, 4.88],     last 10 vals [8.17, 8.17, 8.16, 8.17, 8.17, 8.17, 6.53, 4.9, 3.26, 1.63]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly serverless cloud functions instances fabrication footprint</li> <li>Hourly on premise GPU server instances fabrication footprint</li> <li>Hourly server instances fabrication footprint</li> <li>Hourly serverless cloud functions energy footprint</li> <li>Hourly on premise GPU server energy footprint</li> <li>Hourly server energy footprint</li> <li>Hourly Default SSD storage instances fabrication footprint</li> <li>Hourly Default SSD storage instances fabrication footprint</li> <li>Hourly storage instances fabrication footprint</li> <li>Hourly Default SSD storage energy footprint</li> <li>Hourly Default SSD storage energy footprint</li> <li>Hourly storage energy footprint</li> <li>Hourly network energy footprint</li> <li>usage pattern total fabrication footprint</li> <li>usage pattern total energy footprint</li> <li>edge device total fabrication footprint across usage patterns</li> <li>edge device total energy footprint across usage patterns</li> <li>edge SSD storage total fabrication footprint across usage patterns</li> <li>edge SSD storage total energy footprint across usage patterns </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to system total carbon footprint\u2019s full calculation graph.</p>"},{"location":"UsageJourney/","title":"UsageJourney","text":""},{"location":"UsageJourney/#params","title":"Params","text":""},{"location":"UsageJourney/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"UsageJourney/#uj_steps","title":"uj_steps","text":"<p>A list of UsageJourneySteps.</p>"},{"location":"UsageJourney/#backwards-links","title":"Backwards links","text":"<ul> <li>UsagePattern</li> </ul>"},{"location":"UsageJourney/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"UsageJourney/#duration","title":"duration","text":"<p>ExplainableQuantity in minute, representing the Duration of user journey.  </p> <p>Example value: 20.0 minute  </p> <p>Depends directly on:  </p> <ul> <li>Time spent on step 20 min streaming </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Duration of user journey\u2019s full calculation graph.</p>"},{"location":"UsageJourneyStep/","title":"UsageJourneyStep","text":""},{"location":"UsageJourneyStep/#params","title":"Params","text":""},{"location":"UsageJourneyStep/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"UsageJourneyStep/#user_time_spent","title":"user_time_spent","text":"<p>Time spent on step 20 min streaming in minute.</p>"},{"location":"UsageJourneyStep/#jobs","title":"jobs","text":"<p>A list of WebApplicationJobs.</p>"},{"location":"UsageJourneyStep/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourney</li> </ul>"},{"location":"UsageJourneyStep/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"UsagePattern/","title":"UsagePattern","text":""},{"location":"UsagePattern/#params","title":"Params","text":""},{"location":"UsagePattern/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"UsagePattern/#usage_journey","title":"usage_journey","text":"<p>An instance of UsageJourney.</p>"},{"location":"UsagePattern/#devices","title":"devices","text":"<p>A list of Devices.</p>"},{"location":"UsagePattern/#network","title":"network","text":"<p>An instance of Network.</p>"},{"location":"UsagePattern/#country","title":"country","text":"<p>An instance of Country.</p>"},{"location":"UsagePattern/#hourly_usage_journey_starts","title":"hourly_usage_journey_starts","text":"<p>Usage pattern hourly nb of visits, in hourly timeseries data.</p>"},{"location":"UsagePattern/#backwards-links","title":"Backwards links","text":"<ul> <li>System</li> </ul>"},{"location":"UsagePattern/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"UsagePattern/#utc_hourly_usage_journey_starts","title":"utc_hourly_usage_journey_starts","text":"<p>Usage pattern utc in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0]  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern hourly nb of visits</li> <li>devices country timezone from user data </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to usage pattern UTC\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#nb_usage_journeys_in_parallel","title":"nb_usage_journeys_in_parallel","text":"<p>Usage pattern hourly nb of user journeys in parallel in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [2.33, 3.0, 2.0, 1.0, 2.0, 2.67, 3.0, 1.0, 1.33, 2.0],     last 10 vals [2.0, 2.33, 1.67, 0.67, 2.67, 1.67, 2.0, 1.33, 3.0, 1.0]  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC</li> <li>Duration of user journey </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to usage pattern hourly nb of user journeys in parallel\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#devices_energy","title":"devices_energy","text":"<p>Energy consumed by usage pattern devices in kilowatt_hour.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:     first 10 vals [0.12, 0.15, 0.1, 0.05, 0.1, 0.13, 0.15, 0.05, 0.07, 0.1],     last 10 vals [0.1, 0.12, 0.08, 0.03, 0.13, 0.08, 0.1, 0.07, 0.15, 0.05]  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern hourly nb of user journeys in parallel</li> <li>Power of device on which the user journey is made </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Energy consumed by usage pattern devices\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#devices_energy_footprint","title":"devices_energy_footprint","text":"<p>Devices energy footprint of usage pattern in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.0, 0.01, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.01, 0.01, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Energy consumed by usage pattern devices</li> <li>Average carbon intensity of devices country </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Devices energy footprint of usage pattern\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#devices_fabrication_footprint","title":"devices_fabrication_footprint","text":"<p>Devices fabrication footprint of usage pattern in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.02, 0.03, 0.02, 0.01, 0.02, 0.03, 0.03, 0.01, 0.01, 0.02],     last 10 vals [0.02, 0.02, 0.02, 0.01, 0.03, 0.02, 0.02, 0.01, 0.03, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern hourly nb of user journeys in parallel</li> <li>Carbon footprint fabrication of device on which the user journey is made</li> <li>Lifespan of device on which the user journey is made</li> <li>device on which the user journey is made fraction of usage time </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Devices fabrication footprint of usage pattern\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#energy_footprint","title":"energy_footprint","text":"<p>Usage pattern total energy footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.0, 0.01, 0.01],     last 10 vals [0.01, 0.01, 0.01, 0.0, 0.01, 0.01, 0.01, 0.01, 0.01, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Devices energy footprint of usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to usage pattern total energy footprint\u2019s full calculation graph.</p>"},{"location":"UsagePattern/#instances_fabrication_footprint","title":"instances_fabrication_footprint","text":"<p>Usage pattern total fabrication footprint in kilogram.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:     first 10 vals [0.02, 0.03, 0.02, 0.01, 0.02, 0.03, 0.03, 0.01, 0.01, 0.02],     last 10 vals [0.02, 0.02, 0.02, 0.01, 0.03, 0.02, 0.02, 0.01, 0.03, 0.01]  </p> <p>Depends directly on:  </p> <ul> <li>Devices fabrication footprint of usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to usage pattern total fabrication footprint\u2019s full calculation graph.</p>"},{"location":"VideoStreaming/","title":"VideoStreaming","text":""},{"location":"VideoStreaming/#params","title":"Params","text":""},{"location":"VideoStreaming/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"VideoStreaming/#server","title":"server","text":"<p>An instance of Server.</p>"},{"location":"VideoStreaming/#base_ram_consumption","title":"base_ram_consumption","text":"<p>Video streaming service os and streaming software base ram consumption from e-footprint hypothesis in gigabyte.</p>"},{"location":"VideoStreaming/#bits_per_pixel","title":"bits_per_pixel","text":"<p>Video streaming service bits per pixel from e-footprint hypothesis in dimensionless.</p>"},{"location":"VideoStreaming/#static_delivery_cpu_cost","title":"static_delivery_cpu_cost","text":"<p>Video streaming service cpu cost per static stream from e-footprint hypothesis in cpu_core * second / gigabyte.</p>"},{"location":"VideoStreaming/#ram_buffer_per_user","title":"ram_buffer_per_user","text":"<p>Video streaming service ram buffer size per user from e-footprint hypothesis in megabyte.</p>"},{"location":"VideoStreaming/#backwards-links","title":"Backwards links","text":"<ul> <li>VideoStreamingJob</li> </ul>"},{"location":"VideoStreaming/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"VideoStreamingJob/","title":"VideoStreamingJob","text":""},{"location":"VideoStreamingJob/#params","title":"Params","text":""},{"location":"VideoStreamingJob/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"VideoStreamingJob/#service","title":"service","text":"<p>An instance of VideoStreaming.</p>"},{"location":"VideoStreamingJob/#resolution","title":"resolution","text":"<p>description to be done</p>"},{"location":"VideoStreamingJob/#video_duration","title":"video_duration","text":"<p>Video streaming job video duration from e-footprint hypothesis in minute.</p>"},{"location":"VideoStreamingJob/#refresh_rate","title":"refresh_rate","text":"<p>Video streaming job frames per second from e-footprint hypothesis in 1 / second.</p>"},{"location":"VideoStreamingJob/#data_stored","title":"data_stored","text":"<p>Data stored by request video streaming job from e-footprint hypothesis in megabyte.</p>"},{"location":"VideoStreamingJob/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourneyStep</li> </ul>"},{"location":"VideoStreamingJob/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"VideoStreamingJob/#request_duration","title":"request_duration","text":"<p>ExplainableQuantity in minute, representing the Video streaming job request duration.  </p> <p>Example value: 20.0 minute  </p> <p>Depends directly on:  </p> <ul> <li>Video streaming job video duration from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Video streaming job request duration\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#dynamic_bitrate","title":"dynamic_bitrate","text":"<p>ExplainableQuantity in megabyte / second, representing the Video streaming job dynamic bitrate.  </p> <p>Example value: 0.78 megabyte / second  </p> <p>Depends directly on:  </p> <ul> <li>Video streaming job resolution from e-footprint hypothesis</li> <li>Video streaming service bits per pixel from e-footprint hypothesis</li> <li>Video streaming job frames per second from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Video streaming job dynamic bitrate\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#data_transferred","title":"data_transferred","text":"<p>ExplainableQuantity in gigabyte, representing the Video streaming job data transferred.  </p> <p>Example value: 0.93 gigabyte  </p> <p>Depends directly on:  </p> <ul> <li>Video streaming job request duration</li> <li>Video streaming job dynamic bitrate </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Video streaming job data transferred\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#compute_needed","title":"compute_needed","text":"<p>ExplainableQuantity in cpu_core, representing the Video streaming job cpu needed.  </p> <p>Example value: 0.0 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Video streaming service CPU cost per static stream from e-footprint hypothesis</li> <li>Video streaming job dynamic bitrate </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Video streaming job CPU needed\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#ram_needed","title":"ram_needed","text":"<p>ExplainableQuantity in megabyte, representing the Video streaming job ram needed.  </p> <p>Example value: 50.0 megabyte  </p> <p>Depends directly on:  </p> <ul> <li>Video streaming service RAM buffer size per user from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Video streaming job RAM needed\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_occurrences_per_usage_pattern","title":"hourly_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly video streaming job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Video streaming job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_avg_occurrences_per_usage_pattern","title":"hourly_avg_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Average hourly video streaming job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [2.33, 3.0, 2.0, 1.0, 2.0, 2.67, 3.0, 1.0, 1.33, 2.0],     last 10 vals [2.0, 2.33, 1.67, 0.67, 2.67, 1.67, 2.0, 1.33, 3.0, 1.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Video streaming job occurrences in usage pattern</li> <li>Video streaming job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Average hourly Video streaming job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_data_transferred_per_usage_pattern","title":"hourly_data_transferred_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data transferred for video streaming job in usage pattern as values, in gigabyte * hour / minute.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB * h / min:     first 10 vals [0.11, 0.14, 0.09, 0.05, 0.09, 0.12, 0.14, 0.05, 0.06, 0.09],     last 10 vals [0.09, 0.11, 0.08, 0.03, 0.12, 0.08, 0.09, 0.06, 0.14, 0.05],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Video streaming job occurrences in usage pattern</li> <li>Video streaming job data transferred</li> <li>Video streaming job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data transferred for Video streaming job in usage pattern\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_data_stored_per_usage_pattern","title":"hourly_data_stored_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data stored for video streaming job in usage pattern as values, in hour * megabyte / minute.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * MB / min:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Video streaming job occurrences in usage pattern</li> <li>Data stored by request Video streaming job from e-footprint hypothesis</li> <li>Video streaming job request duration </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data stored for Video streaming job in usage pattern\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_avg_occurrences_across_usage_patterns","title":"hourly_avg_occurrences_across_usage_patterns","text":"<p>Hourly video streaming job average occurrences across usage patterns in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [2.33, 3.0, 2.0, 1.0, 2.0, 2.67, 3.0, 1.0, 1.33, 2.0],     last 10 vals [2.0, 2.33, 1.67, 0.67, 2.67, 1.67, 2.0, 1.33, 3.0, 1.0]  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Video streaming job occurrences in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Video streaming job average occurrences across usage patterns\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_data_transferred_across_usage_patterns","title":"hourly_data_transferred_across_usage_patterns","text":"<p>Hourly video streaming job data transferred across usage patterns in gigabyte * hour / minute.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB * h / min:     first 10 vals [0.11, 0.14, 0.09, 0.05, 0.09, 0.12, 0.14, 0.05, 0.06, 0.09],     last 10 vals [0.09, 0.11, 0.08, 0.03, 0.12, 0.08, 0.09, 0.06, 0.14, 0.05]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Video streaming job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Video streaming job data transferred across usage patterns\u2019s full calculation graph.</p>"},{"location":"VideoStreamingJob/#hourly_data_stored_across_usage_patterns","title":"hourly_data_stored_across_usage_patterns","text":"<p>Hourly video streaming job data stored across usage patterns in hour * megabyte / minute.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * MB / min:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data stored for Video streaming job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Video streaming job data stored across usage patterns\u2019s full calculation graph.</p>"},{"location":"WebApplication/","title":"WebApplication","text":""},{"location":"WebApplication/#params","title":"Params","text":""},{"location":"WebApplication/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"WebApplication/#server","title":"server","text":"<p>An instance of BoaviztaCloudServer.</p>"},{"location":"WebApplication/#technology","title":"technology","text":"<p>description to be done</p>"},{"location":"WebApplication/#backwards-links","title":"Backwards links","text":"<ul> <li>WebApplicationJob</li> </ul>"},{"location":"WebApplication/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"WebApplicationJob/","title":"WebApplicationJob","text":""},{"location":"WebApplicationJob/#params","title":"Params","text":""},{"location":"WebApplicationJob/#name","title":"name","text":"<p>A human readable description of the object.</p>"},{"location":"WebApplicationJob/#service","title":"service","text":"<p>An instance of WebApplication.</p>"},{"location":"WebApplicationJob/#data_transferred","title":"data_transferred","text":"<p>Sum of all data uploads and downloads for request web application job from e-footprint hypothesis in megabyte.</p>"},{"location":"WebApplicationJob/#data_stored","title":"data_stored","text":"<p>Data stored by request web application job from e-footprint hypothesis in kilobyte.</p>"},{"location":"WebApplicationJob/#implementation_details","title":"implementation_details","text":"<p>description to be done</p>"},{"location":"WebApplicationJob/#backwards-links","title":"Backwards links","text":"<ul> <li>UsageJourneyStep</li> </ul>"},{"location":"WebApplicationJob/#calculated-attributes","title":"Calculated attributes","text":""},{"location":"WebApplicationJob/#request_duration","title":"request_duration","text":"<p>ExplainableQuantity in second, representing the Web application job request duration from e-footprint hypothesis.  </p> <p>Example value: 1.0 second  </p> <p>Depends directly on:  </p> <p>through the following calculations:  </p> <p>You can also visit the link to Web application job request duration from e-footprint hypothesis\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#compute_needed","title":"compute_needed","text":"<p>ExplainableQuantity in cpu_core, representing the  from e-footprint analysis of boavizta\u2019s ecobenchmark data.  </p> <p>Example value: 0.08 cpu_core  </p> <p>Depends directly on:  </p> <ul> <li>Web application job implementation details from e-footprint hypothesis</li> <li>Technology used in Web application service from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to  from e-footprint analysis of Boavizta\u2019s Ecobenchmark data\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#ram_needed","title":"ram_needed","text":"<p>ExplainableQuantity in megabyte, representing the  from e-footprint analysis of boavizta\u2019s ecobenchmark data.  </p> <p>Example value: 6.15 megabyte  </p> <p>Depends directly on:  </p> <ul> <li>Web application job implementation details from e-footprint hypothesis</li> <li>Technology used in Web application service from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to  from e-footprint analysis of Boavizta\u2019s Ecobenchmark data\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_occurrences_per_usage_pattern","title":"hourly_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly web application job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [7.0, 9.0, 6.0, 3.0, 6.0, 8.0, 9.0, 3.0, 4.0, 6.0],     last 10 vals [6.0, 7.0, 5.0, 2.0, 8.0, 5.0, 6.0, 4.0, 9.0, 3.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>usage pattern UTC </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Web application job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_avg_occurrences_per_usage_pattern","title":"hourly_avg_occurrences_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Average hourly web application job occurrences in usage pattern as values, in dimensionless.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Hourly Web application job occurrences in usage pattern</li> <li>Web application job request duration from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Average hourly Web application job occurrences in usage pattern\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_data_transferred_per_usage_pattern","title":"hourly_data_transferred_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data transferred for web application job in usage pattern as values, in hour * megabyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * MB / s:     first 10 vals [0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Web application job occurrences in usage pattern</li> <li>Sum of all data uploads and downloads for request Web application job from e-footprint hypothesis</li> <li>Web application job request duration from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data transferred for Web application job in usage pattern\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_data_stored_per_usage_pattern","title":"hourly_data_stored_per_usage_pattern","text":"<p>Dictionary with UsagePattern as keys and                          Hourly data stored for web application job in usage pattern as values, in hour * kilobyte / second.  </p> <p>Example value: { cc4b52: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08],  }  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Web application job occurrences in usage pattern</li> <li>Data stored by request Web application job from e-footprint hypothesis</li> <li>Web application job request duration from e-footprint hypothesis </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly data stored for Web application job in usage pattern\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_avg_occurrences_across_usage_patterns","title":"hourly_avg_occurrences_across_usage_patterns","text":"<p>Hourly web application job average occurrences across usage patterns in dimensionless.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:     first 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Average hourly Web application job occurrences in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Web application job average occurrences across usage patterns\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_data_transferred_across_usage_patterns","title":"hourly_data_transferred_across_usage_patterns","text":"<p>Hourly web application job data transferred across usage patterns in hour * megabyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * MB / s:     first 10 vals [0.0, 0.01, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0, 0.0, 0.0],     last 10 vals [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.01, 0.0]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data transferred for Web application job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Web application job data transferred across usage patterns\u2019s full calculation graph.</p>"},{"location":"WebApplicationJob/#hourly_data_stored_across_usage_patterns","title":"hourly_data_stored_across_usage_patterns","text":"<p>Hourly web application job data stored across usage patterns in hour * kilobyte / second.  </p> <p>Example value: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in h * kB / s:     first 10 vals [0.19, 0.25, 0.17, 0.08, 0.17, 0.22, 0.25, 0.08, 0.11, 0.17],     last 10 vals [0.17, 0.19, 0.14, 0.06, 0.22, 0.14, 0.17, 0.11, 0.25, 0.08]  </p> <p>Depends directly on:  </p> <ul> <li>Hourly data stored for Web application job in usage pattern </li> </ul> <p>through the following calculations:  </p> <p>You can also visit the link to Hourly Web application job data stored across usage patterns\u2019s full calculation graph.</p>"},{"location":"best_practices/","title":"What about best practices ?","text":"<p>Best practices shine best when the systems they apply to have little variability. We\u2019ve seen in the Why e-footprint ? article that digital services are highly variable, so starting with a list of best practices to apply puts us at risk of spending efforts on actions that have very little leverage. This doesn\u2019t mean that best practices are useless; rather, they should come in as a resource after a modeling has show where to act.</p>"},{"location":"build_process/","title":"What about the build process of the service ?","text":"<p>Work in progress</p>"},{"location":"database_modeling/","title":"How to model a database","text":"<p>Work in progress</p>"},{"location":"design_deep_dive/","title":"e-footprint design choices deep dive","text":"<p>Work in progress</p>"},{"location":"efootprint_scope/","title":"e-footprint scope","text":"<p>e-footprint aims at being a digital service carbon footprint modeling tool (more on what is means later). First of all, what is a digital service ? We call digital service any set of information technology tools that allow users to accomplish something, including all hardware, software, and peripheral equipment. In other words, the sum of all digital services makes up the entirety of the digital world. This scope is very large and that\u2019s why e-footprint has taken a detailed low-level approach. This fine granularity is complemented by a library of higher-level builders like the Boavizta cloud server builder that allow for the creation of objects with fewer parameters for better usability. Of course some digital services will be harder to model with e-footprint than others, but all can be approximated. Refer to the how-to section for more information on how to model different types of services.</p> <p>Read the Why e-footprint ? article to understand the need for such a tool when ecodesigning a digital service.</p>"},{"location":"evolution_across_time/","title":"How to model the evolution of a system across time","text":"<p>Work in progress</p>"},{"location":"explanation_overview/","title":"Explanation overview","text":"<p>This section is composed of several very useful articles to understand in detail what e-footprint is and how to use it to ecodesign your digital service.</p> <ul> <li>the e-footprint scope article defines digital services and states that it is possible to model any digital service with e-footprint.</li> <li>Why e-footprint ? unfolds the analysis that led to the development of e-footprint.</li> <li>How to get started suggests the identification of an e-footprint owner within any team who wants to ecodesign its service.</li> <li>The e-footprint methodology details the steps in the iterative modeling process.</li> <li>e-footprint design choices deep dive goes into fine details as to why the e-footprint model has been built the way it is.</li> </ul>"},{"location":"get_started/","title":"Get started","text":""},{"location":"get_started/#who-is-e-footprint-for","title":"Who is e-footprint for ?","text":"<p>e-footprint is a tool for teams who want to ecodesign the digital services they develop (for example, a product team in a start up or big company). Even if it is a technical tool, it is not only for the most technical people in the team (architects, devs, data scientists). In fact, the environmental impact of the service is everyone\u2019s responsibility, just as its commercial success is. Moreover, we\u2019ve seen the Why e-footprint ? article that e-footprint also incorporates a user journey and usage language that will speak to tech professionals with a less technical background.</p>"},{"location":"get_started/#team-organization","title":"Team organization","text":"<p>What we recommend is that an e-footprint owner be identified in the team, who will be responsible for the building and maintenance of the modeling by soliciting all team members for their input. If using the python package, this person must have basic python skills, but an interface is underway that will completely remove any need for a technical background to get started with e-footprint. The e-footprint owner can thus be any person from the team, with or without technical background. The only prerequisite is a willingness to gain skill on the understanding and use of the tool.</p> <p>While there is one owner responsible for fully understanding the modeling of the digital service built by the team, when ecodesign decisions are made or when the impact of a new feature is anticipated, the whole team looks at the simulation and makes a collegiate decision.</p> <p>The e-footprint model owner is very much advised to read and understand the e-footprint methodology, why e-footprint has been built, and its model choices.</p>"},{"location":"links/","title":"External links","text":"<ul> <li>article on the use of e-footprint for the analysis of the Paylib service (in French)</li> </ul>"},{"location":"machine_learning_workflow/","title":"How to model a machine learning workflow","text":"<p>Work in progress</p>"},{"location":"measurement_tools/","title":"What about measurement tools ?","text":"<p>Work in progress</p>"},{"location":"methodology/","title":"The e-footprint methodology","text":""},{"location":"methodology/#high-level-modeling-then-refinement","title":"High-level modeling then refinement","text":"<p>Ecodesigning with e-footprint is an iterative process. Since e-footprint is a modeling tool, it is possible (and advised) to start with a very high level modeling of the studied system. This first modeling will be very inaccurate but give useful orders of magnitude: I know that the impact potential of my ecodesign initiative will be much greater if my first modeling shows me 1000 tons of CO2 / year than if it shows only 100 kg / year, and I will size my efforts accordingly. An advantage of this approach is that it doesn\u2019t require the installation of any tool. Then, depending on the results of this first analysis, I have 3 choices:</p> <ul> <li>Stop modeling because my system is too small to justify investing in ecodesigning it.</li> <li>Invest effort to increase the granularity of my modeling because it is not enough to guide decision.</li> <li>Decide that the model is detailed enough to make decisions and got to the next step.</li> </ul>"},{"location":"methodology/#modeling-analysis","title":"Modeling analysis","text":"<p>If the system is big enough, and once the model has been refined enough, comes the analysis time. It consists in diving into the results of the model to understand where emissions come from and what the emission reduction opportunities are. For example, if the analysis shows that much of the impact comes from the network, I can look up the network ecodesign best practices for inspiration, or simply ask the tech team. </p>"},{"location":"methodology/#simulation-and-priorisation","title":"Simulation and priorisation","text":"<p>When ecodesign opportunities or new features are considered, they are implemented as changes to the e-footprint model, e-footprint computes the new impact of the system, and the difference between the old and the new footprint is the environmental return on investment of the action. Since modeling often takes orders of magnitude less time than implementing, this approach allows for an efficient prioritization of effort: you will finally be able to choose the most impactful best practice for your particular conditions !</p>"},{"location":"object_reference/","title":"How to read the object reference","text":"<p>Here is the structure of an e-footprint object page:</p>"},{"location":"object_reference/#object-name","title":"Object name","text":""},{"location":"object_reference/#params","title":"Params","text":"<p>The parameters required for the creation of the Python object. Parameters can be attributes representing a physical or technical property of the object, or another e-footprint object.</p>"},{"location":"object_reference/#backwards-links","title":"Backwards links","text":"<p>The list of objects that have the current object as attribute</p>"},{"location":"object_reference/#calculated-attributes","title":"Calculated attributes","text":"<p>Calculations made by the e-footprint model. For each calculated attribute, its direct parents and related formula are given, as well as a link to its calculation graph representing its full origin.</p>"},{"location":"only_CO2/","title":"Why only CO2 ?","text":"<p>Work in progress</p>"},{"location":"server_to_server_interaction/","title":"How to model server to server interaction","text":"<p>Work in progress</p>"},{"location":"tutorial/","title":"e-footprint quickstart","text":"<p>This notebook provides an example scenario that you can use to get familiar with the Python API of efootprint: the daily video consumption of all French households on a big streaming platform.</p> <p>You will get to describe:</p> <ul> <li>the infrastructure involved (servers with auto-scaling settings, storage and network)</li> <li>the user journey involving 2 steps (Streaming, Upload)</li> <li>the usage pattern and the device population that executes it (the laptops of all French households)</li> </ul>"},{"location":"tutorial/#import-the-packages","title":"Import the packages","text":"<p>\u26a0 If this steps fails, remember to run ipython kernel install --user --name=efootprint-kernel inside your python virtual environement (initializable with <code>poetry install</code>) to be able to select efootprint-kernel as the jupyter kernel.</p> <pre><code># If this hasn\u2019t been done in virtualenv (useful for Google colab notebook)\n!pip install efootprint\n</code></pre> <p>pip install logs...</p> <pre><code>import os\n\nfrom efootprint.abstract_modeling_classes.source_objects import SourceValue, Sources, SourceObject\nfrom efootprint.abstract_modeling_classes.empty_explainable_object import EmptyExplainableObject\nfrom efootprint.core.usage.usage_journey import UsageJourney\nfrom efootprint.core.usage.usage_journey_step import UsageJourneyStep\nfrom efootprint.core.usage.job import Job\nfrom efootprint.core.hardware.server import Server, ServerTypes\nfrom efootprint.core.hardware.storage import Storage\nfrom efootprint.core.usage.usage_pattern import UsagePattern\nfrom efootprint.core.hardware.network import Network\nfrom efootprint.core.hardware.device import Device\nfrom efootprint.core.system import System\nfrom efootprint.constants.countries import Countries\nfrom efootprint.constants.units import u\n</code></pre>"},{"location":"tutorial/#define-the-infrastructure","title":"Define the infrastructure","text":""},{"location":"tutorial/#creating-objects-manually","title":"Creating objects manually","text":"<p>An e-footprint object has a name and attributes describing its technical and environmental characteristics:</p> <pre><code>storage = Storage(\n    \"SSD storage\",\n    carbon_footprint_fabrication_per_storage_capacity=SourceValue(160 * u.kg / u.TB, Sources.STORAGE_EMBODIED_CARBON_STUDY),\n    power_per_storage_capacity=SourceValue(1.3 * u.W / u.TB, Sources.STORAGE_EMBODIED_CARBON_STUDY),\n    lifespan=SourceValue(6 * u.years, Sources.HYPOTHESIS),\n    idle_power=SourceValue(0 * u.W, Sources.HYPOTHESIS),\n    storage_capacity=SourceValue(1 * u.TB, Sources.STORAGE_EMBODIED_CARBON_STUDY),\n    data_replication_factor=SourceValue(3 * u.dimensionless, Sources.HYPOTHESIS),\n    data_storage_duration = SourceValue(2 * u.year, Sources.HYPOTHESIS),\n    base_storage_need = SourceValue(100 * u.TB, Sources.HYPOTHESIS),\n    fixed_nb_of_instances = EmptyExplainableObject()\n    )\n</code></pre>"},{"location":"tutorial/#creating-objects-from-default-values","title":"Creating objects from default values","text":"<p>All e-footprint classes also implement default values and a from_defaults method that allows for using a set a pre-defined default attributes and specifying the ones we want to specify through keyword arguments.</p> <pre><code>Storage.default_values\n</code></pre> <pre><code>{'carbon_footprint_fabrication_per_storage_capacity': 160.0 kilogram / terabyte,\n 'power_per_storage_capacity': 1.3 watt / terabyte,\n 'lifespan': 6.0 year,\n 'idle_power': 0.0 watt,\n 'storage_capacity': 1.0 terabyte,\n 'data_replication_factor': 3.0 dimensionless,\n 'base_storage_need': 0.0 terabyte,\n 'data_storage_duration': 5.0 year}\n</code></pre> <pre><code># Creating a storage object from defaults while specifying storage capacity using keyword arguments\nprint(Storage.from_defaults(\"2 TB SSD storage\", storage_capacity=SourceValue(2 * u.TB)))\n</code></pre> <pre><code>Storage c5494e\n\nname: 2 TB SSD storage\nlifespan: 6.0 year\nfraction_of_usage_time: 1.0 dimensionless\ncarbon_footprint_fabrication_per_storage_capacity: 160.0 kilogram / terabyte\npower_per_storage_capacity: 1.3 watt / terabyte\nidle_power: 0.0 watt\nstorage_capacity: 2.0 terabyte\ndata_replication_factor: 3.0 dimensionless\ndata_storage_duration: 5.0 year\nbase_storage_need: 0.0 terabyte\nfixed_nb_of_instances: no value\n\ncalculated_attributes:\n  carbon_footprint_fabrication: 0.0 kilogram\n  power: 0.0 watt\n  storage_needed: no value\n  storage_freed: no value\n  automatic_storage_dumps_after_storage_duration: no value\n  storage_delta: no value\n  full_cumulative_storage_need: no value\n  raw_nb_of_instances: no value\n  nb_of_instances: no value\n  nb_of_active_instances: no value\n  instances_fabrication_footprint: no value\n  instances_energy: no value\n  energy_footprint: no value\n</code></pre> <p>We can see from the above print that e-footprint objects have calculated attributes that are setup as empty and then computed by e-footprint when associated with a usage. More information on e-footprint objects\u2019 calculated_attributes can be found in the object reference section of the e-footprint documentation.</p>"},{"location":"tutorial/#creating-objects-from-archetypes","title":"Creating objects from archetypes","text":"<p>Some e-footprint objects (Storage, Network and Hardware) also have archetypes that have their own set of default values:</p> <pre><code>Storage.archetypes()\n</code></pre> <pre><code>[&lt;bound method Storage.ssd of &lt;class 'efootprint.core.hardware.storage.Storage'&gt;&gt;,\n &lt;bound method Storage.hdd of &lt;class 'efootprint.core.hardware.storage.Storage'&gt;&gt;]\n</code></pre> <pre><code>print(Storage.hdd())\n</code></pre> <pre><code>Storage bffa6d\n\nname: Default HDD storage\nlifespan: 4.0 year\nfraction_of_usage_time: 1.0 dimensionless\ncarbon_footprint_fabrication_per_storage_capacity: 20.0 kilogram / terabyte\npower_per_storage_capacity: 4.2 watt / terabyte\nidle_power: 0.0 watt\nstorage_capacity: 1.0 terabyte\ndata_replication_factor: 3.0 dimensionless\ndata_storage_duration: 5.0 year\nbase_storage_need: 0.0 terabyte\nfixed_nb_of_instances: no value\n\ncalculated_attributes:\n  carbon_footprint_fabrication: 0.0 kilogram\n  power: 0.0 watt\n  storage_needed: no value\n  storage_freed: no value\n  automatic_storage_dumps_after_storage_duration: no value\n  storage_delta: no value\n  full_cumulative_storage_need: no value\n  raw_nb_of_instances: no value\n  nb_of_instances: no value\n  nb_of_active_instances: no value\n  instances_fabrication_footprint: no value\n  instances_energy: no value\n  energy_footprint: no value\n</code></pre> <p>Apart from environmental and technical attributes, e-footprint objects can link to other e-footprint objects. For example, server objects have a storage attribute:</p> <pre><code>server = Server.from_defaults(\n    \"server\",\n    server_type=ServerTypes.autoscaling(),\n    power_usage_effectiveness=SourceValue(1.2 * u.dimensionless, Sources.HYPOTHESIS),\n    average_carbon_intensity=SourceValue(100 * u.g / u.kWh, Sources.HYPOTHESIS),\n    utilization_rate=SourceValue(0.9 * u.dimensionless, Sources.HYPOTHESIS),\n    base_ram_consumption=SourceValue(300 * u.MB, Sources.HYPOTHESIS),\n    base_compute_consumption=SourceValue(2 * u.cpu_core, Sources.HYPOTHESIS),\n    storage=storage\n)\n\nprint(server)\n</code></pre> <pre><code>Server a2e9eb\n\nname: server\ncarbon_footprint_fabrication: 600.0 kilogram\npower: 300.0 watt\nlifespan: 6.0 year\nfraction_of_usage_time: 1.0 dimensionless\nserver_type: autoscaling\nidle_power: 50.0 watt\nram: 128.0 gigabyte\ncompute: 24.0 cpu_core\npower_usage_effectiveness: 1.2 dimensionless\naverage_carbon_intensity: 100.0 gram / kilowatt_hour\nutilization_rate: 0.9 dimensionless\nbase_ram_consumption: 300.0 megabyte\nbase_compute_consumption: 2.0 cpu_core\nfixed_nb_of_instances: no value\nstorage: bafae6\n\ncalculated_attributes:\n  hour_by_hour_ram_need: no value\n  hour_by_hour_compute_need: no value\n  occupied_ram_per_instance: no value\n  occupied_compute_per_instance: no value\n  available_ram_per_instance: no value\n  available_compute_per_instance: no value\n  raw_nb_of_instances: no value\n  nb_of_instances: no value\n  instances_fabrication_footprint: no value\n  instances_energy: no value\n  energy_footprint: no value\n</code></pre>"},{"location":"tutorial/#creating-objects-from-builders-connected-to-external-data-sources","title":"Creating objects from builders connected to external data sources","text":"<p>Of course only relying on a single set of default values for creating our servers won\u2019t get us far. That\u2019s why e-footprint provides a builder class that connects to Boavizta\u2019s API to allow for the creation of servers from a cloud provider and an instance type.</p> <pre><code>from efootprint.builders.hardware.boavizta_cloud_server import BoaviztaCloudServer\n\n# Some attributes can only take specific values\nfor attribute, attribute_list_value in BoaviztaCloudServer.list_values.items():\n    print(f\"Possible values for {attribute}: {attribute_list_value}\")\n</code></pre> <pre><code>2025-09-02 10:50:15,122 - INFO - Calling Boavizta API with url https://api.boavizta.org/v1/cloud/instance/all_providers, method GET and params {}\n2025-09-02 10:50:15,174 - INFO - Boavizta API call succeeded in 51 ms.\n2025-09-02 10:50:15,174 - INFO - Calling Boavizta API with url https://api.boavizta.org/v1/cloud/instance/all_instances, method GET and params {'provider': 'aws'}\n2025-09-02 10:50:15,232 - INFO - Boavizta API call succeeded in 57 ms.\n2025-09-02 10:50:15,235 - INFO - Calling Boavizta API with url https://api.boavizta.org/v1/cloud/instance/all_instances, method GET and params {'provider': 'azure'}\n2025-09-02 10:50:15,283 - INFO - Boavizta API call succeeded in 47 ms.\n2025-09-02 10:50:15,284 - INFO - Calling Boavizta API with url https://api.boavizta.org/v1/cloud/instance/all_instances, method GET and params {'provider': 'scaleway'}\n2025-09-02 10:50:15,329 - INFO - Boavizta API call succeeded in 44 ms.\n2025-09-02 10:50:15,330 - INFO - Calling Boavizta API with url https://api.boavizta.org/v1/cloud/instance/all_instances, method GET and params {'provider': 'gcp'}\n2025-09-02 10:50:15,379 - INFO - Boavizta API call succeeded in 48 ms.\n2025-09-02 10:50:15,381 - INFO - Imported BoaviztaCloudServer in 0.28009 seconds.\n\n\nPossible values for server_type: [autoscaling, on-premise, serverless]\nPossible values for provider: [aws, azure, scaleway, gcp]\n</code></pre> <pre><code># Moreover, some attributes depend on another attribute for their values\nfor attribute, attribute_conditional_dict in BoaviztaCloudServer.conditional_list_values.items():\n    condition_attribute = attribute_conditional_dict['depends_on']\n    print(f\"Possible values for {attribute} depend on {condition_attribute}:\\n\")\n    for condition_value, possible_values in attribute_conditional_dict[\"conditional_list_values\"].items():\n        if len(possible_values) &gt; 10:\n            values_to_print = possible_values[:5] + [\"etc.\"]\n        else:\n            values_to_print = possible_values\n        print(f\"    Possible values when {condition_attribute} is {condition_value}: {values_to_print}\")\n    print(\"\\n\")\n</code></pre> <pre><code>Possible values for fixed_nb_of_instances depend on server_type:\n\n    Possible values when server_type is autoscaling: [no value]\n    Possible values when server_type is serverless: [no value]\n\n\nPossible values for instance_type depend on provider:\n\n    Possible values when provider is aws: [a1.medium, a1.large, a1.xlarge, a1.2xlarge, a1.4xlarge, 'etc.']\n    Possible values when provider is azure: [d2ads_v5, d4ads_v5, d8ads_v5, d16ads_v5, d32ads_v5, 'etc.']\n    Possible values when provider is scaleway: [coparm1-16c-64g, coparm1-2c-8g, coparm1-32c-128g, coparm1-4c-16g, coparm1-8c-32g, 'etc.']\n    Possible values when provider is gcp: [c4a-standard-1, c4a-standard-2, c4a-standard-4, c4a-standard-8, c4a-standard-16, 'etc.']\n</code></pre> <pre><code># BoaviztaCloudServer still has quite a lot of default values but ones that are much easier to make hypothesis on, \n# like lifespan, server utilisation rate or power usage effectiveness\nBoaviztaCloudServer.default_values\n</code></pre> <pre><code>{'provider': scaleway,\n 'instance_type': ent1-s,\n 'server_type': autoscaling,\n 'average_carbon_intensity': 400.0 gram / kilowatt_hour,\n 'lifespan': 6.0 year,\n 'idle_power': 0.0 watt,\n 'power_usage_effectiveness': 1.2 dimensionless,\n 'utilization_rate': 0.9 dimensionless,\n 'base_ram_consumption': 0.0 gigabyte,\n 'base_compute_consumption': 0.0 cpu_core,\n 'fixed_nb_of_instances': no value}\n</code></pre> <pre><code># The most difficult environmental and technical attributes are retrieved from a call to BoaviztAPI:\nprint(BoaviztaCloudServer.from_defaults(\"Default Boavizta cloud server\", storage=Storage.ssd(storage_capacity=SourceValue(32 * u.GB))))\n</code></pre> <pre><code>BoaviztaCloudServer 021ceb\n\nname: Default Boavizta cloud server\nlifespan: 6.0 year\nfraction_of_usage_time: 1.0 dimensionless\nserver_type: autoscaling\nidle_power: 0.0 watt\npower_usage_effectiveness: 1.2 dimensionless\naverage_carbon_intensity: 400.0 gram / kilowatt_hour\nutilization_rate: 0.9 dimensionless\nbase_ram_consumption: 0.0 gigabyte\nbase_compute_consumption: 0.0 cpu_core\nfixed_nb_of_instances: no value\nstorage: 92a484\nprovider: scaleway\ninstance_type: ent1-s\n\ncalculated_attributes:\n  api_call_response: no value\n  carbon_footprint_fabrication: 0.0 kilogram\n  power: 0.0 watt\n  ram: 0.0 gigabyte\n  compute: 0.0 cpu_core\n  hour_by_hour_ram_need: no value\n  hour_by_hour_compute_need: no value\n  occupied_ram_per_instance: no value\n  occupied_compute_per_instance: no value\n  available_ram_per_instance: no value\n  available_compute_per_instance: no value\n  raw_nb_of_instances: no value\n  nb_of_instances: no value\n  instances_fabrication_footprint: no value\n  instances_energy: no value\n  energy_footprint: no value\n</code></pre>"},{"location":"tutorial/#optional-install-services-on-your-server","title":"[Optional] Install services on your server","text":"<p>Manually creating job objects can get tricky because you have to specify how much RAM and compute the job uses on the server it runs on during its duration. That\u2019s why e-footprint allows for the installation of services on servers, that will give access to higher-level job classes that compute these very technical attributes from simpler ones. For example, let\u2019s install a video streaming service on our server:</p>"},{"location":"tutorial/#video-streaming-service","title":"Video streaming service","text":"<pre><code>from efootprint.builders.services.video_streaming import VideoStreaming\n\nVideoStreaming.default_values\n</code></pre> <pre><code>{'base_ram_consumption': 2.0 gigabyte,\n 'bits_per_pixel': 0.1 dimensionless,\n 'static_delivery_cpu_cost': 4.0 cpu_core * second / gigabyte,\n 'ram_buffer_per_user': 50.0 megabyte}\n</code></pre> <pre><code>video_streaming_service = VideoStreaming.from_defaults(\"Video streaming service\", server=server)\n</code></pre> <pre><code>2025-09-02 10:50:15,402 - INFO - Computing calculated attributes for VideoStreaming Video streaming service\n2025-09-02 10:50:15,403 - INFO - Computing calculated attributes for Server server\n</code></pre> <pre><code># All services have a list of compatible job types, let\u2019s check out the ones for video streaming:\nVideoStreaming.compatible_jobs()\n</code></pre> <pre><code>[efootprint.builders.services.video_streaming.VideoStreamingJob]\n</code></pre> <pre><code># There\u2019s only one so let\u2019s use it !\nfrom efootprint.builders.services.video_streaming import VideoStreamingJob\n\nVideoStreamingJob.default_values\n</code></pre> <pre><code>{'resolution': 1080p (1920 x 1080),\n 'video_duration': 1.0 hour,\n 'refresh_rate': 30.0 / second,\n 'data_stored': 0.0 megabyte}\n</code></pre> <pre><code>print(VideoStreamingJob.list_values)\n</code></pre> <pre><code>{'resolution': [480p (640 x 480), 720p (1280 x 720), 1080p (1920 x 1080), 1440p (2560 x 1440), 2K (2048 x 1080), 4K (3840 x 2160), 8K (7680 x 4320)]}\n</code></pre> <pre><code># Now it\u2019s easy to add a 1 hour 1080p streaming job to our streaming service\nstreaming_job = VideoStreamingJob.from_defaults(\n    \"streaming job\", service=video_streaming_service, resolution=SourceObject(\"1080p (1920 x 1080)\"), \n    video_duration=SourceValue(20 * u.min))\n\n# For optimization purposes calculations are only made when usage data has been entered but we can force\n#\u202fsome of them to see what the VideoStreamingJob does.\nstreaming_job.update_dynamic_bitrate()\nstreaming_job.update_data_transferred()\nstreaming_job.update_compute_needed()\nstreaming_job.update_ram_needed()\n\nprint(streaming_job)\n</code></pre> <pre><code>VideoStreamingJob d0e6da\n\nname: streaming job\ndata_stored: 0.0 megabyte\nservice: 6fb169\nvideo_duration: 20.0 minute\nresolution: 1080p (1920 x 1080)\nrefresh_rate: 30.0 / second\n\ncalculated_attributes:\n  request_duration: 0.0 second\n  dynamic_bitrate: 0.78 megabyte / second\n  data_transferred: 0.0 gigabyte\n  compute_needed: 0.0 cpu_core\n  ram_needed: 50.0 megabyte\n  hourly_occurrences_per_usage_pattern: {}\n  hourly_avg_occurrences_per_usage_pattern: {}\n  hourly_data_transferred_per_usage_pattern: {}\n  hourly_data_stored_per_usage_pattern: {}\n  hourly_avg_occurrences_across_usage_patterns: no value\n  hourly_data_transferred_across_usage_patterns: no value\n  hourly_data_stored_across_usage_patterns: no value\n</code></pre>"},{"location":"tutorial/#web-application-service","title":"Web application service","text":"<p>In the same vein, we can install a web application service on our server. e-footprint\u2019s WebApplication service relies on the analysis of Boavizta\u2019s ecobenchmark project.</p> <pre><code>from efootprint.builders.services.web_application import WebApplication, WebApplicationJob\n\nweb_app_service = WebApplication(\"Web app\", server=server, technology=SourceObject(\"php-symfony\"))\nweb_app_job = WebApplicationJob.from_defaults(\"fetching web view\", service=web_app_service)\nweb_app_job.update_compute_needed()\nweb_app_job.update_ram_needed()\n\nprint(web_app_service)\nprint(web_app_job)\n</code></pre> <pre><code>2025-09-02 10:50:15,469 - INFO - Computing calculated attributes for WebApplication Web app\n2025-09-02 10:50:15,469 - INFO - Computing calculated attributes for Server server\n\n\nWebApplication 169771\n\nname: Web app\nserver: a2e9eb\nbase_ram_consumption: no value\nbase_compute_consumption: no value\ntechnology: php-symfony\n\nWebApplicationJob 212256\n\nname: fetching web view\ndata_transferred: 2.2 megabyte\ndata_stored: 100.0 kilobyte\nservice: 169771\nimplementation_details: default\n\ncalculated_attributes:\n  request_duration: 0.0 second\n  compute_needed: 0.08 cpu_core\n  ram_needed: 6.15 megabyte\n  hourly_occurrences_per_usage_pattern: {}\n  hourly_avg_occurrences_per_usage_pattern: {}\n  hourly_data_transferred_per_usage_pattern: {}\n  hourly_data_stored_per_usage_pattern: {}\n  hourly_avg_occurrences_across_usage_patterns: no value\n  hourly_data_transferred_across_usage_patterns: no value\n  hourly_data_stored_across_usage_patterns: no value\n</code></pre>"},{"location":"tutorial/#define-the-user-journey","title":"Define the user journey","text":"<p>This is the modeling of the average daily usage of the streaming platform in France:</p> <pre><code>streaming_step = UsageJourneyStep(\n    \"20 min streaming\",\n    user_time_spent=SourceValue(20 * u.min, Sources.USER_DATA),\n    jobs=[web_app_job, streaming_job])\n\nvideo_upload_job = Job(\n    \"upload job\", server=server, data_transferred=SourceValue(20 * u.MB, Sources.USER_DATA),\n    data_stored=SourceValue(20 * u.MB, Sources.USER_DATA),\n    request_duration=SourceValue(2 * u.s, Sources.HYPOTHESIS),\n    compute_needed=SourceValue(1 * u.cpu_core, Sources.HYPOTHESIS),\n    ram_needed=SourceValue(50 * u.MB, Sources.HYPOTHESIS))\n\nupload_step = UsageJourneyStep(\n    \"1 min video capture then upload\",\n    user_time_spent=SourceValue(70 * u.s, Sources.USER_DATA),\n    jobs=[web_app_job, video_upload_job])\n</code></pre> <p>The user journey is then simply a list of user journey steps:</p> <pre><code>user_journey = UsageJourney(\"Mean video consumption user journey\", uj_steps=[streaming_step, upload_step])\n</code></pre> <pre><code>2025-09-02 10:50:15,479 - INFO - Computing calculated attributes for UsageJourney Mean video consumption user journey\n</code></pre>"},{"location":"tutorial/#describe-usage","title":"Describe usage","text":"<p>An e-footprint usage pattern links a user journey to devices that run it, a network, a country, and the number of times the user journey gets executed hour by hour. </p> <pre><code># Let\u2019s build synthetic usage data by summing a linear growth with a sinusoidal fluctuation components, then adding daily variation\nfrom datetime import datetime, timedelta\n\nfrom efootprint.builders.time_builders import linear_growth_hourly_values\n\nstart_date = datetime.strptime(\"2025-01-01\", \"%Y-%m-%d\")\ntimespan = 3 * u.year\n\nlinear_growth = linear_growth_hourly_values(timespan, start_value=5000, end_value=100000, start_date=start_date)\nlinear_growth.set_label(\"Hourly user journeys linear growth component\")\n\nlinear_growth.plot()\n</code></pre> <p></p> <pre><code>from efootprint.builders.time_builders import sinusoidal_fluct_hourly_values\n\nsinusoidal_fluct = sinusoidal_fluct_hourly_values(\n    timespan, sin_fluct_amplitude=3000, sin_fluct_period_in_hours=3 * 30 * 24, start_date=start_date)\n\nlin_growth_plus_sin_fluct = (linear_growth + sinusoidal_fluct).set_label(\"Hourly user journeys linear growth with sinusoidal fluctuations\")\n\nlin_growth_plus_sin_fluct.plot()\n</code></pre> <p></p> <pre><code># Let\u2019s add daily variations because people use the system less at night\nfrom efootprint.builders.time_builders import daily_fluct_hourly_values\n\ndaily_fluct = daily_fluct_hourly_values(timespan, fluct_scale=0.8, hour_of_day_for_min_value=4, start_date=start_date)\ndaily_fluct.set_label(\"Daily volume fluctuation\")\n\ndaily_fluct.plot(xlims=[start_date, start_date+timedelta(days=1)])\n</code></pre> <p></p> <pre><code>hourly_user_journey_starts = lin_growth_plus_sin_fluct * daily_fluct\nhourly_user_journey_starts.set_label(\"Hourly number of user journey started\")\n\nhourly_user_journey_starts.plot(xlims=[start_date, start_date + timedelta(days=7)])\n</code></pre> <p></p> <pre><code># Over 3 years the daily fluctuations color the area between daily min and max number of hourly user journeys\nhourly_user_journey_starts.plot()\n</code></pre> <p></p> <pre><code>network = Network(\n        \"WIFI network\",\n        bandwidth_energy_intensity=SourceValue(0.05 * u(\"kWh/GB\"), Sources.TRAFICOM_STUDY))\n\nusage_pattern = UsagePattern(\n    \"Daily video streaming consumption\",\n    usage_journey=user_journey,\n    devices=[Device.laptop()],\n    network=network,\n    country=Countries.FRANCE(),\n    hourly_usage_journey_starts=hourly_user_journey_starts)\n\nsystem = System(\"System\", usage_patterns=[usage_pattern], edge_usage_patterns=[])\n</code></pre> <pre><code>2025-09-02 10:50:15,991 - INFO - Starting computing System modeling\n2025-09-02 10:50:15,991 - INFO - Computing calculated attributes for UsagePattern Daily video streaming consumption\n2025-09-02 10:50:15,992 - INFO - Computing calculated attributes for WebApplicationJob fetching web view\n2025-09-02 10:50:15,993 - INFO - Computing calculated attributes for VideoStreamingJob streaming job\n2025-09-02 10:50:15,993 - INFO - Computing calculated attributes for Job upload job\n2025-09-02 10:50:15,994 - INFO - Computing calculated attributes for Server server\n2025-09-02 10:50:15,996 - INFO - Computing calculated attributes for Network WIFI network\n2025-09-02 10:50:15,996 - INFO - Computing calculated attributes for Storage SSD storage\n2025-09-02 10:50:15,998 - INFO - Computing calculated attributes for System System\n2025-09-02 10:50:15,999 - INFO - Computed 62 calculated attributes over 14 objects in 0.008 seconds or 0.13 ms per computation\n</code></pre>"},{"location":"tutorial/#results","title":"Results","text":""},{"location":"tutorial/#computed-attributes","title":"Computed attributes","text":"<p>Now all calculated_attributes have been computed:</p> <pre><code>print(server)\n</code></pre> <pre><code>Server a2e9eb\n\nname: server\ncarbon_footprint_fabrication: 600.0 kilogram\npower: 300.0 watt\nlifespan: 6.0 year\nfraction_of_usage_time: 1.0 dimensionless\nserver_type: autoscaling\nidle_power: 50.0 watt\nram: 128.0 gigabyte\ncompute: 24.0 cpu_core\npower_usage_effectiveness: 1.2 dimensionless\naverage_carbon_intensity: 100.0 gram / kilowatt_hour\nutilization_rate: 0.9 dimensionless\nbase_ram_consumption: 300.0 megabyte\nbase_compute_consumption: 2.0 cpu_core\nfixed_nb_of_instances: no value\nstorage: bafae6\n\ncalculated_attributes:\n  hour_by_hour_ram_need: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in GB:\n    first 10 vals [50.09, 36.35, 25.77, 19.11, 16.86, 19.21, 26.03, 36.89, 51.08, 67.67],\n    last 10 vals [1027.92, 1358.57, 1713.46, 2068.39, 2399.2, 2683.34, 2901.45, 3038.65, 3085.61, 3039.1]\n  hour_by_hour_compute_need: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in cpu_core:\n    first 10 vals [4.9, 3.56, 2.52, 1.87, 1.65, 1.88, 2.55, 3.61, 5.0, 6.62],\n    last 10 vals [100.61, 132.97, 167.7, 202.44, 234.82, 262.63, 283.98, 297.41, 302.0, 297.45]\n  occupied_ram_per_instance: 2300.0 megabyte\n  occupied_compute_per_instance: 2.0 cpu_core\n  available_ram_per_instance: 112.9 gigabyte\n  available_compute_per_instance: 19.6 cpu_core\n  raw_nb_of_instances: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:\n    first 10 vals [0.44, 0.32, 0.23, 0.17, 0.15, 0.17, 0.23, 0.33, 0.45, 0.6],\n    last 10 vals [9.1, 12.03, 15.18, 18.32, 21.25, 23.77, 25.7, 26.91, 27.33, 26.92]\n  nb_of_instances: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in dimensionless:\n    first 10 vals [1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0],\n    last 10 vals [10.0, 13.0, 16.0, 19.0, 22.0, 24.0, 26.0, 27.0, 28.0, 27.0]\n  instances_fabrication_footprint: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:\n    first 10 vals [0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01, 0.01],\n    last 10 vals [0.11, 0.15, 0.18, 0.22, 0.25, 0.27, 0.3, 0.31, 0.32, 0.31]\n  instances_energy: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kWh:\n    first 10 vals [0.19, 0.16, 0.13, 0.11, 0.1, 0.11, 0.13, 0.16, 0.2, 0.24],\n    last 10 vals [3.33, 4.39, 5.51, 6.64, 7.7, 8.57, 9.27, 9.69, 9.88, 9.7]\n  energy_footprint: 26298 values from 2024-12-31 23:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:\n    first 10 vals [0.02, 0.02, 0.01, 0.01, 0.01, 0.01, 0.01, 0.02, 0.02, 0.02],\n    last 10 vals [0.33, 0.44, 0.55, 0.66, 0.77, 0.86, 0.93, 0.97, 0.99, 0.97]\n</code></pre>"},{"location":"tutorial/#system-footprint-overview","title":"System footprint overview","text":"<pre><code>system.plot_footprints_by_category_and_object(\"System footprints.html\")\nprint(\"placeholder\")\n</code></pre>"},{"location":"tutorial/#object-relationships-graph","title":"Object relationships graph","text":"<p>Hover over a node to get the numerical values of its environmental and technical attributes. For simplifying the graph the Network and Hardware nodes are not shown.</p> <pre><code>from efootprint.utils.object_relationships_graphs import USAGE_PATTERN_VIEW_CLASSES_TO_IGNORE, INFRA_VIEW_CLASSES_TO_IGNORE\n\nusage_pattern.object_relationship_graph_to_file(\"object_relationships_graph_up_view.html\", width=\"800px\", height=\"500px\",\n    classes_to_ignore=USAGE_PATTERN_VIEW_CLASSES_TO_IGNORE, notebook=True)\n</code></pre> <pre><code>object_relationships_graph_up_view.html\n</code></pre> <pre><code>usage_pattern.object_relationship_graph_to_file(\"object_relationships_graph_infra_view.html\", width=\"800px\", height=\"500px\",\n    classes_to_ignore=INFRA_VIEW_CLASSES_TO_IGNORE, notebook=True)\n</code></pre> <pre><code>object_relationships_graph_infra_view.html\n</code></pre> <pre><code>usage_pattern.object_relationship_graph_to_file(\"object_relationships_graph_all_objects.html\", width=\"800px\", height=\"500px\",\n    classes_to_ignore=[], notebook=True)\n</code></pre> <pre><code>object_relationships_graph_all_objects.html\n</code></pre>"},{"location":"tutorial/#calculus-graph","title":"Calculus graph","text":"<p>Any e-footprint calculation can generate its calculation graph for full auditability. Hover on a calculus node to display its formula and numeric value.</p> <pre><code>usage_pattern.devices_fabrication_footprint.calculus_graph_to_file(\n    \"device_population_fab_footprint_calculus_graph.html\", width=\"800px\", height=\"500px\", notebook=True)\n</code></pre>"},{"location":"tutorial/#plotting-an-objects-hourly-and-cumulated-co2-emissions","title":"Plotting an object\u2019s hourly and cumulated CO2 emissions","text":"<pre><code>server.energy_footprint.plot()\n</code></pre> <pre><code>server.energy_footprint.plot(cumsum=True)\n</code></pre> <pre><code>system.total_footprint.plot(cumsum=True)\n</code></pre>"},{"location":"tutorial/#analysing-the-impact-of-a-change","title":"Analysing the impact of a change","text":""},{"location":"tutorial/#numeric-input-change","title":"Numeric input change","text":"<p>Any input change automatically triggers the computation of calculations that depend on the input. For example, let\u2019s say that the average data download consumption of the streaming step decreased because of a change in default video quality:</p> <pre><code>streaming_job.resolution = SourceObject(\"720p (1280 x 720)\", Sources.USER_DATA)\n</code></pre> <pre><code>2025-09-02 10:50:16,848 - INFO - 1 changes lead to 13 update computations done in 3.6 ms (avg 0.28 ms per computation).\n</code></pre> <pre><code>system.plot_emission_diffs(\"bandwith reduction.png\")\n</code></pre> <p></p>"},{"location":"tutorial/#system-structure-change","title":"System structure change","text":"<p>Now let\u2019s make a more complex change, like adding a conversation with a generative AI chatbot before streaming the video. We will use e-footprint\u2019s GenAIModel object that fetches LLM data like number of parameters from EcoLogits.</p> <pre><code># GenAI models need a GPU\u202fserver\nfrom efootprint.core.hardware.gpu_server import GPUServer\nfrom efootprint.builders.services.generative_ai_ecologits import GenAIModel\n\nllm_server = GPUServer.from_defaults(\"Inference GPU server\", server_type=ServerTypes.serverless(), compute=SourceValue(16 * u.gpu),\n                                    storage=Storage.ssd(storage_capacity=SourceValue(1 * u.TB)))\ngenai_model = GenAIModel.from_defaults(\n    \"Openai\u2019s gpt-4o\", server=llm_server, \n    provider=SourceObject(\"openai\"), model_name=SourceObject(\"gpt-4o\"))\n</code></pre> <pre><code>2025-09-02 10:50:17,000 - INFO - Computing calculated attributes for GenAIModel Openai\u2019s gpt-4o\n2025-09-02 10:50:17,001 - INFO - Computing calculated attributes for GPUServer Inference GPU server\n</code></pre> <pre><code>from efootprint.builders.services.generative_ai_ecologits import GenAIJob\n\ngenai_job = GenAIJob(\"LLM API call\", genai_model, output_token_count= SourceValue(1000 * u.dimensionless))\nllm_chat_step = UsageJourneyStep(\n    \"Chat with LLM to select video\", user_time_spent=SourceValue(1 * u.min, Sources.HYPOTHESIS),\n    jobs=[genai_job])\n</code></pre> <pre><code># Adding the new step is simply an attribute update.\nuser_journey.uj_steps.append(llm_chat_step)\n</code></pre> <pre><code>2025-09-02 10:50:17,008 - INFO - 13 recomputed objects: ['1d53c1', '9102ca', '86b4c0', '255d1f', '212256', 'd0e6da', 'ec9b65', '411333', '884f93', 'a2e9eb', 'ce0fab', 'bafae6', '6c14aa']\n2025-09-02 10:50:17,017 - INFO - 1 changes lead to 104 update computations done in 11.2 ms (avg 0.11 ms per computation).\n</code></pre> <pre><code>system.plot_emission_diffs(\"LLM chat addition.png\")\n</code></pre> <p></p> <p>We can see that server energy footprint has been multiplied by more than 1000 and the rest of the impact is quite negligible. Good to know to make informed decisions ! Of course the impact is very much dependent on assumptions. If the LLM\u202fserver ran on low-carbon electricity for example:</p> <pre><code>llm_server.average_carbon_intensity = SourceValue(50 * u.g / u.kWh, Sources.HYPOTHESIS)\nsystem.plot_emission_diffs(\"lower LLM inference carbon intensity.png\")\n</code></pre> <pre><code>2025-09-02 10:50:17,148 - INFO - 1 changes lead to 3 update computations done in 2.6 ms (avg 0.87 ms per computation).\n</code></pre> <p></p>"},{"location":"tutorial/#recap-of-all-system-changes","title":"Recap of all System changes","text":"<pre><code>system.plot_emission_diffs(\"All system diffs.png\", from_start=True)\n</code></pre>"},{"location":"tutorial/#making-simulations-of-changes-in-the-future","title":"Making simulations of changes in the future","text":"<p>We\u2019ve seen that you can make changes in your modeling and analyse the differences, but most likely the changes you\u2019re contemplating will happen at some point in the future. Let\u2019s model a change in the future thanks to e-footprint\u2019s ModelingUpdate object !</p> <pre><code># Let\u2019s first revert the system to its state before changes\n# We can make optimized batch changes by using the ModelingUpdate object, that is also used to make simulations of changes in the future\nfrom efootprint.abstract_modeling_classes.modeling_update import ModelingUpdate\n\nModelingUpdate([\n    [user_journey.uj_steps, [streaming_step, upload_step]],\n    [llm_server.average_carbon_intensity, SourceValue(300 * u.g / u.kWh, Sources.HYPOTHESIS)],\n    [streaming_job.resolution, SourceObject(\"1080p (1920 x 1080)\")]\n])\n\nsystem.plot_footprints_by_category_and_object(\"System footprints after reset.html\")\n</code></pre> <pre><code>2025-09-02 10:50:17,402 - INFO - Optimized modeling object computation chain from 16 to 12 modeling object calculated attributes recomputations.\n2025-09-02 10:50:17,403 - INFO - 13 recomputed objects: ['1d53c1', '9102ca', '86b4c0', '212256', 'd0e6da', 'ec9b65', '255d1f', '411333', 'a2e9eb', '884f93', 'bafae6', 'ce0fab', '6c14aa']\n2025-09-02 10:50:17,403 - INFO - Optimized update function chain from 120 to 104 calculations\n2025-09-02 10:50:17,410 - INFO - 3 changes lead to 104 update computations done in 9.2 ms (avg 0.09 ms per computation).\n</code></pre> <pre><code># To create a simulation, which is a change in the future, simply set ModelingUpdate\u2019s simulation_date parameter\nimport pytz\nfrom datetime import timezone\n\nsimulation = ModelingUpdate([[user_journey.uj_steps, [streaming_step, upload_step, llm_chat_step]]],\n                           simulation_date=pytz.utc.localize(start_date) + timedelta(days=365))\n</code></pre> <pre><code>2025-09-02 10:50:17,455 - INFO - 13 recomputed objects: ['1d53c1', '9102ca', '86b4c0', '255d1f', '212256', 'd0e6da', 'ec9b65', '411333', '884f93', 'a2e9eb', 'ce0fab', 'bafae6', '6c14aa']\n2025-09-02 10:50:17,503 - INFO - Resetting direct changes from 1 updated values\n2025-09-02 10:50:17,503 - INFO - Resetting filtered hourly quantities from 1 updated values\n2025-09-02 10:50:17,504 - INFO - Resetting replaced ancestors copies from 81 updated values\n2025-09-02 10:50:17,504 - INFO - Resetting recomputed values from 104 updated values\n2025-09-02 10:50:17,504 - INFO - 1 changes lead to 104 update computations done in 51.2 ms (avg 0.49 ms per computation).\n</code></pre> <pre><code>system.total_footprint.plot(cumsum=True)\n</code></pre> <p></p> <pre><code>llm_server.energy_footprint.plot(cumsum=True)\n</code></pre> <p></p> <pre><code># The system state is reset to baseline after the simulation.\n# For example, our LLM server has no energy footprint since it is not used in the baseline modeling\nllm_server.energy_footprint\n</code></pre> <pre><code>no value\n</code></pre> <pre><code># To set simulation values, use ModelingUpdate\u2019s set_updated_values method\nsimulation.set_updated_values()\nllm_server.energy_footprint\n</code></pre> <pre><code>2025-09-02 10:50:17,729 - INFO - Setting direct changes from 1 previous values\n2025-09-02 10:50:17,729 - INFO - Setting filtered hourly quantities from 1 previous values\n2025-09-02 10:50:17,729 - INFO - Setting replaced ancestors copies from 81 previous values\n2025-09-02 10:50:17,730 - INFO - Setting recomputed values from 104 previous values\n\n\n\n\n\n17537 values from 2026-01-01 00:00:00+00:00 to 2028-01-01 17:00:00+00:00 in kg:\n    first 10 vals [358.02, 253.3, 187.45, 165.02, 187.57, 253.61, 358.69, 495.68, 655.28, 826.65],\n    last 10 vals [1346.61, 1779.79, 2244.7, 2709.68, 3143.05, 3515.28, 3801.01, 3980.76, 4042.27, 3981.35]\n</code></pre> <pre><code># Conversely, pre-update values are reset using ModelingUpdate\u2019s reset_values method\nsimulation.reset_values()\nllm_server.energy_footprint\n</code></pre> <pre><code>2025-09-02 10:50:17,733 - INFO - Resetting direct changes from 1 updated values\n2025-09-02 10:50:17,733 - INFO - Resetting filtered hourly quantities from 1 updated values\n2025-09-02 10:50:17,734 - INFO - Resetting replaced ancestors copies from 81 updated values\n2025-09-02 10:50:17,734 - INFO - Resetting recomputed values from 104 updated values\n\n\n\n\n\nno value\n</code></pre>"},{"location":"tutorial/#optional-model-edge-devices","title":"[Optional] Model edge devices","text":"<p>The above modeling reflects a centralized web logic: the input usage is a business input (typically, the number of visits on a website), and the infrastructure has to be sized to meet the demand. But there are cases where the usage is actually proportional to a number of devices, typically when trying to model the impact of selling digital devices, like servers, smartphones or video game consoles. In this case, e-footprint edge objects allow for the description of usage per device, and number of devices sold / produced over the modeling period.</p>"},{"location":"tutorial/#define-the-edge-device","title":"Define the edge device","text":"<p>The EdgeStorage and EdgeDevice objects are similar to the Storage and Server objects, but simpler because they don\u2019t have to include any autoscaling logic.</p> <pre><code>from efootprint.core.hardware.edge_storage import EdgeStorage\nfrom efootprint.core.hardware.edge_device import EdgeDevice\n\nedge_storage = EdgeStorage(\n    \"Edge SSD storage\",\n    carbon_footprint_fabrication_per_storage_capacity=SourceValue(160 * u.kg / u.TB),\n    power_per_storage_capacity=SourceValue(1.3 * u.W / u.TB),\n    lifespan=SourceValue(6 * u.years),\n    idle_power=SourceValue(0.1 * u.W),\n    storage_capacity=SourceValue(256 * u.GB),\n    base_storage_need=SourceValue(10 * u.GB),\n)\n\nedge_device = EdgeDevice(\n    \"Edge device\",\n    carbon_footprint_fabrication=SourceValue(60 * u.kg),\n    power=SourceValue(30 * u.W),\n    lifespan=SourceValue(8 * u.year),\n    idle_power=SourceValue(5 * u.W),\n    ram=SourceValue(16 * u.GB),\n    compute=SourceValue(8 * u.cpu_core),\n    power_usage_effectiveness=SourceValue(1.0 * u.dimensionless),\n    utilization_rate=SourceValue(0.8 * u.dimensionless),\n    base_ram_consumption=SourceValue(1 * u.GB),\n    base_compute_consumption=SourceValue(0.1 * u.cpu_core),\n    storage=edge_storage\n)\n</code></pre>"},{"location":"tutorial/#define-the-edge-usage-journey-with-the-processes-that-run-on-the-edge-device","title":"Define the edge usage journey with the processes that run on the edge device","text":"<p>The EdgeUsageJourney object associate a list of RecurrentEdgeProcesses to an EdgeDevice object, over a usage span. The RecurrentEdgeProcess object describes the usage of compute, RAM and storage on the EdgeDevice object by describing hourly usage in a canonical week starting at midnight on a Monday local time.</p> <pre><code>import numpy as np\nfrom pint import Quantity\n\nfrom efootprint.abstract_modeling_classes.source_objects import SourceRecurrentValues\nfrom efootprint.core.usage.recurrent_edge_process import RecurrentEdgeProcess\nfrom efootprint.core.usage.edge_usage_journey import EdgeUsageJourney\n\nedge_process = RecurrentEdgeProcess(\n    \"Edge process\",\n    recurrent_compute_needed=SourceRecurrentValues(\n        Quantity(np.array([1] * 168, dtype=np.float32), u.cpu_core)), # 7 * 24 = 168 hours in the canonical week\n    recurrent_ram_needed=SourceRecurrentValues(\n        Quantity(np.array([2] * 168, dtype=np.float32), u.GB)),\n    recurrent_storage_needed=SourceRecurrentValues(\n        Quantity(np.array([200] * 168, dtype=np.float32), u.kB))\n)\n\nedge_usage_journey = EdgeUsageJourney(\n    \"Edge usage journey\",\n    edge_processes=[edge_process],\n    edge_device=edge_device,\n    usage_span=SourceValue(6 * u.year)\n)\n</code></pre>"},{"location":"tutorial/#define-the-edge-usage-pattern","title":"Define the edge usage pattern","text":"<p>The EdgeUsagePattern object specifies the number of edge devices that are emitted in a given countrey across time, through its hourly_edge_usage_journey_starts parameter. It could be for example the sales projection of a video game console seller. It is then linked to a System through System\u2019s edge_usage_patterns parameter, just like web usage patterns are linked to a System through the usage_patterns parameter. That way, web and edge objects can coexist in the same simulation.</p> <pre><code>from efootprint.builders.time_builders import create_hourly_usage_from_frequency\nfrom efootprint.core.usage.edge_usage_pattern import EdgeUsagePattern\n\nedge_usage_pattern = EdgeUsagePattern(\n    \"Edge usage pattern\",\n    edge_usage_journey=edge_usage_journey,\n    country=Countries.FRANCE(),\n    hourly_edge_usage_journey_starts=create_hourly_usage_from_frequency(\n        timespan=5 * u.year, input_volume=10, frequency='weekly',\n        active_days=[0, 1, 2, 3, 4, 5], hours=[9, 10, 11, 12, 15, 16, 17, 18, 19])\n)\n\nsystem.edge_usage_patterns = [edge_usage_pattern]\n\nsystem.plot_footprints_by_category_and_object(\"System with edge objects footprints.html\")\n</code></pre> <pre><code>2025-09-02 10:50:17,777 - INFO - 13 recomputed objects: ['86b4c0', 'fcecde', 'fdd7e0', '51f334', 'af6c1b', '212256', 'd0e6da', 'ec9b65', '411333', 'a2e9eb', 'bafae6', '6c14aa', '6c14aa']\n2025-09-02 10:50:17,778 - INFO - Optimized update function chain from 94 to 93 calculations\n2025-09-02 10:50:17,787 - INFO - 1 changes lead to 93 update computations done in 11.3 ms (avg 0.12 ms per computation).\n</code></pre> <pre><code>system.plot_emission_diffs(\"Add edge objects.png\")\n</code></pre> <p></p> <pre><code>system.object_relationship_graph_to_file(\"system_with_edge_objects_graph_up_view.html\", width=\"800px\", height=\"500px\",\n    classes_to_ignore=USAGE_PATTERN_VIEW_CLASSES_TO_IGNORE, notebook=True)\n</code></pre> <pre><code>system_with_edge_objects_graph_up_view.html\n</code></pre> <pre><code>system.object_relationship_graph_to_file(\"system_with_edge_objects_graph_infra_view.html\", width=\"800px\", height=\"500px\",\n    classes_to_ignore=INFRA_VIEW_CLASSES_TO_IGNORE, notebook=True)\n</code></pre> <pre><code>system_with_edge_objects_graph_infra_view.html\n</code></pre>"},{"location":"why_efootprint/","title":"Why e-footprint ?","text":"<p>For a more in-depth discussion of e-footprint\u2019s genesis by its designer, watch the e-footprint presentation made by Vincent Villet at the 2023 Paris Impact Summit (9 minutes, in French).</p>"},{"location":"why_efootprint/#the-need-for-modeling-in-ecodesign","title":"The need for modeling in ecodesign","text":"<p>We define ecodesign as the process of building or maintaining a digital service while minimizing its environmental impact. To do so, we first need to understand where its impact comes from and then be able to anticipate the impact of considered actions to choose the most appropriate one.</p> <p>How much intuition can we use to prioritize ecodesign actions ? Is it enough to give tech people a green IT training and let their experience do the rest ? This approach works well for web performance, where the combination of theory and practice allows experienced professionals to build an intuitive understanding of their systems, but there is a major difference between a digital service performance and its environmental impact: a poor performance is perceptible (and even often frustrating !), while the environmental impact lives entirely outside of the reach of our senses. This great distance in space and time between our actions and their impacts (described in more details in this excellent article from Jean-Marc Jancovici) is a very new and difficult problem for humanity, touches every aspect of modern life, and is especially salient for digital services. It calls for a fully explicit model because building intuition is simply not possible.</p>"},{"location":"why_efootprint/#how-precise-does-the-modeling-need-to-be","title":"How precise does the modeling need to be ?","text":"<p>Now that we know that we need an explicit model, we need to know how precise the model needs to be to allow for good decision-making. Indeed, any understanding is a tradeoff between precision and usability. For example, having in mind a mental model that says \"for an average consumer car, driving at 110km/h on the highway instead of 130km/h reduces the speed by 15% but the oil consumption by 25%\" is simplistic because many factors influence the result (the exact shape of the car, the wind, the profile of the road etc.). However, I consider it usable for the decision I have to make (which speed to drive at when taking the highway) because I know that the exact oil saving figure for the particular vehicle I\u2019m driving won\u2019t be so far from this simplified average. This example introduces two important concepts that physicists often use:</p> <ul> <li>reduced-order modeling, where the mathematical complexity of a real world phenomenon is voluntarily simplified while preserving enough precision for the task at hand.</li> <li>order of magnitude, an approximate figure that is easier to obtain and use in reduced-order model computations, and enough to make informed decisions.</li> </ul> <p>The more complex and variable the studied system is, the more complex (=high order) the corresponding model needs to be before it delivers useful orders of magnitude.</p> <p>How complex would a good enough model need to be to effectively guide ecodesign decisions ? It depends on the complexity and variability of digital services. Let\u2019s make some observations and some simple thought experiments to find out the essential parameters.</p> <p>First and foremost, digital services vary wildly in usage volumes. The biggest social networks have billions of daily visits while your company showcase website might have only a few hundreds. The same ecodesign action leading to a 10% energy consumption reduction will be vastly more impactful on the big system than on the small one, so usage volume input is critical.</p> <p>Then let\u2019s look at the four key components of digital services: user devices, network, servers and storage. Different services make use of them in vastly different proportions, making each of them sometimes negligible, sometimes crucial. For example, streaming services make a heavy use of the network, gen AI services use a lot of computing power in servers, and social networks store huge amounts of data. All these different types of objects thus need to be represented in our model.</p> <p>Lastly, many ecodesign actions involve changing the way users interact with the service, so there needs to be a way to tell the model that users have changed the actions that they typically do. Hence, user journeys must be part of the model inputs.</p> <p>We now have a framework for thinking about the physicality of our digital service: digital services must at least be described in terms of usage journeys (UsageJourney) with their usage information (UsagePattern). Each user journey is made of steps (UsageJourneyStep) that make requests (Job) through a network (Network), on a server (Server), possibly saving data to storage (Storage).</p> <p>e-footprint was born from the above analysis and the observation that no other tool had taken a modeling approach bringing together all these objects. It started as an Excel modeling and then evolved towards a Python package to allow for greater flexibility in the combination of objects.</p> <p>Moreover, it is necessary to take a life cycle analysis approach to understand all aspects of environmental impact from cradle to grave. Here the orders of magnitude show that focusing on the fabrication and run phases of the service is a good first approximation, neglecting transport and end of life.</p>"},{"location":"why_efootprint/#the-difference-between-the-model-and-the-modeling","title":"The difference between the model and the modeling","text":"<p>e-footprint is a modeling tool that embeds a model of the relationships between components of a digital service and the associated environmental footprint. When you describe your digital service with e-footprint, what you get is a modeling of this service.</p> <p>For more details on the model design decisions in e-footprint, check the model design deep dive.</p>"},{"location":"why_efootprint/#get-started","title":"Get started","text":"<p>Now that you understand the concepts on which e-footprint is built, read the How to get started article to start your ecodesign journey !</p>"}]}